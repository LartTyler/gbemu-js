/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Emulator/CPU/Clock.ts":
/*!***********************************!*\
  !*** ./src/Emulator/CPU/Clock.ts ***!
  \***********************************/
/*! exports provided: Clock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Clock\", function() { return Clock; });\nclass Clock {\r\n    constructor() {\r\n        this.t = 0;\r\n        this._m = 0;\r\n    }\r\n    get m() {\r\n        return this._m;\r\n    }\r\n    set m(value) {\r\n        this._m = value;\r\n        this.t = value * 4;\r\n    }\r\n    reset() {\r\n        this.m = 0;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Clock.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Add.ts":
/*!********************************************!*\
  !*** ./src/Emulator/CPU/Operations/Add.ts ***!
  \********************************************/
/*! exports provided: AddOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AddOperators\", function() { return AddOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst registerAdd = (value, registers) => {\r\n    registers.a += value;\r\n    registers.flags = 0;\r\n    if (!(registers.a & 255))\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    if (registers.a > 255)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY;\r\n    registers.a &= 255;\r\n    registers.m = 1;\r\n};\r\nconst registerAdd16 = (value, registers) => {\r\n    value += (registers.h << 8) + registers.l;\r\n    if (value > 65535)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY;\r\n    else\r\n        registers.flags &= 0xEF;\r\n    registers.h = (value >> 8) & 255;\r\n    registers.l = value & 255;\r\n    registers.m = 3;\r\n};\r\nconst registerAdd16FromAddress = (sourceHigh, sourceLow, registers) => {\r\n    registerAdd16((registers[sourceHigh] << 8) + registers[sourceLow], registers);\r\n};\r\nconst addFromAddress = (address, memory, registers) => {\r\n    const a = registers.a;\r\n    const m = memory.readByte(address);\r\n    registers.a += m;\r\n    registers.flags = registers.a > 255 ? _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY : 0;\r\n    registers.a &= 255;\r\n    if (!registers.a)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    if ((registers.a ^ a ^ m) & 0x10)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].HALF_CARRY;\r\n    registers.m = 2;\r\n};\r\nconst addWithCarry = (value, registers) => {\r\n    const a = registers.a;\r\n    registers.a += value;\r\n    registers.a += registers.flags & _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY ? 1 : 0;\r\n    registers.flags = (registers.a > 255) ? _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY : 0;\r\n    registers.a &= 255;\r\n    if (registers.a)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    if ((registers.a ^ value ^ a) & 0x10)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].HALF_CARRY;\r\n    registers.m = 1;\r\n};\r\nconst addFromAddressWithCarry = (address, memory, registers) => {\r\n    const a = registers.a;\r\n    const m = memory.readByte(address);\r\n    registers.a += m;\r\n    registers.a += registers.flags & _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY ? 1 : 0;\r\n    registers.flags = registers.a > 255 ? _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY : 0;\r\n    registers.a &= 255;\r\n    if (!registers.a)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    if ((registers.a ^ m ^ a) & 0x10)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].HALF_CARRY;\r\n    registers.m = 2;\r\n};\r\nconst AddOperators = {\r\n    AddA: hardware => registerAdd(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    AddB: hardware => registerAdd(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    AddC: hardware => registerAdd(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    AddD: hardware => registerAdd(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    AddE: hardware => registerAdd(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    AddH: hardware => registerAdd(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    AddL: hardware => registerAdd(hardware.cpu.registers.l, hardware.cpu.registers),\r\n    AddPCAddress: hardware => addFromAddress(hardware.cpu.registers.programCount, hardware.memory, hardware.cpu.registers),\r\n    AddHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        addFromAddress((registers.h << 8) + registers.l, hardware.memory, registers);\r\n    },\r\n    AddBCToHL: hardware => registerAdd16FromAddress('b', 'c', hardware.cpu.registers),\r\n    AddDEToHL: hardware => registerAdd16FromAddress('d', 'e', hardware.cpu.registers),\r\n    AddHLToHL: hardware => registerAdd16FromAddress('h', 'l', hardware.cpu.registers),\r\n    AddSPToHL: hardware => registerAdd16(hardware.cpu.registers.stackPointer, hardware.cpu.registers),\r\n    AddPCAddressToSP: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        let i = memory.readByte(registers.programCount++);\r\n        if (i > 127)\r\n            i = -((~i + 1) & 255);\r\n        registers.stackPointer += i;\r\n        registers.m = 4;\r\n    },\r\n    AddAWithCarry: hardware => addWithCarry(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    AddBWithCarry: hardware => addWithCarry(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    AddCWithCarry: hardware => addWithCarry(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    AddDWithCarry: hardware => addWithCarry(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    AddEWithCarry: hardware => addWithCarry(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    AddHWithCarry: hardware => addWithCarry(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    AddLWithCarry: hardware => addWithCarry(hardware.cpu.registers.l, hardware.cpu.registers),\r\n    AddPCAddressWithCarry: hardware => addFromAddressWithCarry(hardware.cpu.registers.programCount, hardware.memory, hardware.cpu.registers),\r\n    AddHLAddressWithCarry: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        addFromAddressWithCarry((registers.h << 8) + registers.l, hardware.memory, registers);\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Add.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation.ts":
/*!********************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation.ts ***!
  \********************************************************/
/*! exports provided: BitManipulationOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitManipulationOperators\", function() { return BitManipulationOperators; });\n/* harmony import */ var _BitManipulation_Reset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BitManipulation/Reset */ \"./src/Emulator/CPU/Operations/BitManipulation/Reset.ts\");\n/* harmony import */ var _BitManipulation_RotateLeft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BitManipulation/RotateLeft */ \"./src/Emulator/CPU/Operations/BitManipulation/RotateLeft.ts\");\n/* harmony import */ var _BitManipulation_RotateRight__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BitManipulation/RotateRight */ \"./src/Emulator/CPU/Operations/BitManipulation/RotateRight.ts\");\n/* harmony import */ var _BitManipulation_Set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BitManipulation/Set */ \"./src/Emulator/CPU/Operations/BitManipulation/Set.ts\");\n/* harmony import */ var _BitManipulation_ShiftLeft__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BitManipulation/ShiftLeft */ \"./src/Emulator/CPU/Operations/BitManipulation/ShiftLeft.ts\");\n/* harmony import */ var _BitManipulation_Test__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BitManipulation/Test */ \"./src/Emulator/CPU/Operations/BitManipulation/Test.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst BitManipulationOperators = Object.assign({}, _BitManipulation_Reset__WEBPACK_IMPORTED_MODULE_0__[\"ResetOperators\"], _BitManipulation_RotateLeft__WEBPACK_IMPORTED_MODULE_1__[\"RotateLeftOperators\"], _BitManipulation_RotateRight__WEBPACK_IMPORTED_MODULE_2__[\"RotateRightOperators\"], _BitManipulation_Test__WEBPACK_IMPORTED_MODULE_5__[\"TestOperators\"], _BitManipulation_Set__WEBPACK_IMPORTED_MODULE_3__[\"SetOperators\"], _BitManipulation_ShiftLeft__WEBPACK_IMPORTED_MODULE_4__[\"ShiftLeftOperators\"]);\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation/Reset.ts":
/*!**************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation/Reset.ts ***!
  \**************************************************************/
/*! exports provided: ResetOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResetOperators\", function() { return ResetOperators; });\nconst reset = (name, mask, registers) => {\r\n    registers[name] &= mask;\r\n    registers.m = 2;\r\n};\r\nconst resetAddress = (mask, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const address = (registers.h << 8) + registers.l;\r\n    memory.writeByte(address, memory.readByte(address) & mask);\r\n    registers.m = 4;\r\n};\r\nconst operators = {};\r\n['a', 'b', 'c', 'd', 'e', 'h', 'l', 'm'].forEach((name) => {\r\n    let mask = 0xFE;\r\n    for (let i = 0; i <= 7; i++) {\r\n        let key;\r\n        let callable;\r\n        if (name === 'm') {\r\n            key = `ResetHLAddressBit${i}`;\r\n            callable = (hardware) => resetAddress(mask, hardware);\r\n        }\r\n        else {\r\n            key = `Reset${name.toUpperCase()}Bit${i}`;\r\n            callable = (hardware) => reset(name, mask, hardware.cpu.registers);\r\n        }\r\n        operators[key] = callable;\r\n        if (i === 0)\r\n            mask -= 1;\r\n        else\r\n            mask -= Math.pow(2, i);\r\n    }\r\n});\r\nconst ResetOperators = operators;\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation/Reset.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation/RotateLeft.ts":
/*!*******************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation/RotateLeft.ts ***!
  \*******************************************************************/
/*! exports provided: RotateLeftOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateLeftOperators\", function() { return RotateLeftOperators; });\nconst rotateLeft = (name, carry, registers) => {\r\n    const flagMask = carry ? 0x80 : 0x10;\r\n    const ci = registers.flags & flagMask ? 1 : 0;\r\n    const co = registers[name] & 0x80 ? 0x10 : 0;\r\n    registers[name] = ((registers[name] << 1) + ci) & 255;\r\n    registers.flags = (registers.flags & 0xEF) + co;\r\n    registers.m = name === 'a' ? 1 : 2;\r\n};\r\nconst rotateLeftAddress = (carry, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const flagMask = carry ? 0x80 : 0x10;\r\n    const address = (registers.h << 8) + registers.l;\r\n    let i = memory.readByte(address);\r\n    const ci = registers.flags & flagMask ? 1 : 0;\r\n    const co = i & 0x80 ? 0x10 : 0;\r\n    i = ((i << 1) + ci) & 255;\r\n    registers.flags = i ? 0 : 0x80;\r\n    memory.writeByte(address, i);\r\n    registers.flags = (registers.flags & 0xEF) + co;\r\n    registers.m = 4;\r\n};\r\nconst RotateLeftOperators = {\r\n    RotateLeftA: hardware => rotateLeft('a', false, hardware.cpu.registers),\r\n    RotateLeftB: hardware => rotateLeft('b', false, hardware.cpu.registers),\r\n    RotateLeftC: hardware => rotateLeft('c', false, hardware.cpu.registers),\r\n    RotateLeftD: hardware => rotateLeft('d', false, hardware.cpu.registers),\r\n    RotateLeftE: hardware => rotateLeft('e', false, hardware.cpu.registers),\r\n    RotateLeftH: hardware => rotateLeft('h', false, hardware.cpu.registers),\r\n    RotateLeftL: hardware => rotateLeft('l', false, hardware.cpu.registers),\r\n    RotateLeftHLAddress: hardware => rotateLeftAddress(false, hardware),\r\n    RotateLeftAWithCarry: hardware => rotateLeft('a', true, hardware.cpu.registers),\r\n    RotateLeftBWithCarry: hardware => rotateLeft('b', true, hardware.cpu.registers),\r\n    RotateLeftCWithCarry: hardware => rotateLeft('c', true, hardware.cpu.registers),\r\n    RotateLeftDWithCarry: hardware => rotateLeft('d', true, hardware.cpu.registers),\r\n    RotateLeftEWithCarry: hardware => rotateLeft('e', true, hardware.cpu.registers),\r\n    RotateLeftHWithCarry: hardware => rotateLeft('h', true, hardware.cpu.registers),\r\n    RotateLeftLWithCarry: hardware => rotateLeft('l', true, hardware.cpu.registers),\r\n    RotateLeftHLAddressWithCarry: hardware => rotateLeftAddress(true, hardware),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation/RotateLeft.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation/RotateRight.ts":
/*!********************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation/RotateRight.ts ***!
  \********************************************************************/
/*! exports provided: RotateRightOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateRightOperators\", function() { return RotateRightOperators; });\nconst rotateRight = (name, carry, registers) => {\r\n    const flagMask = carry ? 1 : 0x10;\r\n    const ci = registers.flags & flagMask ? 0x80 : 0;\r\n    const co = registers[name] & 1 ? 0x10 : 0;\r\n    registers[name] = ((registers[name] >> 1) + ci) & 255;\r\n    registers.flags = (registers.flags & 0xEF) + co;\r\n    registers.m = name === 'a' ? 1 : 2;\r\n};\r\nconst rotateRightAddress = (carry, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const flagMask = carry ? 1 : 0x10;\r\n    const address = (registers.h << 8) + registers.l;\r\n    let i = memory.readByte(address);\r\n    const ci = registers.flags & flagMask ? 0x80 : 0;\r\n    const co = i & 1 ? 0x10 : 0;\r\n    i = ((i >> 1) + ci) & 255;\r\n    memory.writeByte(address, i);\r\n    registers.flags = i ? 0 : 0x80;\r\n    registers.flags = (registers.flags & 0xEF) + co;\r\n    registers.m = 4;\r\n};\r\nconst RotateRightOperators = {\r\n    RotateRightA: hardware => rotateRight('a', false, hardware.cpu.registers),\r\n    RotateRightB: hardware => rotateRight('b', false, hardware.cpu.registers),\r\n    RotateRightC: hardware => rotateRight('c', false, hardware.cpu.registers),\r\n    RotateRightD: hardware => rotateRight('d', false, hardware.cpu.registers),\r\n    RotateRightE: hardware => rotateRight('e', false, hardware.cpu.registers),\r\n    RotateRightH: hardware => rotateRight('h', false, hardware.cpu.registers),\r\n    RotateRightL: hardware => rotateRight('l', false, hardware.cpu.registers),\r\n    RotateRightHLAddress: hardware => rotateRightAddress(false, hardware),\r\n    RotateRightAWithCarry: hardware => rotateRight('a', true, hardware.cpu.registers),\r\n    RotateRightBWithCarry: hardware => rotateRight('b', true, hardware.cpu.registers),\r\n    RotateRightCWithCarry: hardware => rotateRight('c', true, hardware.cpu.registers),\r\n    RotateRightDWithCarry: hardware => rotateRight('d', true, hardware.cpu.registers),\r\n    RotateRightEWithCarry: hardware => rotateRight('e', true, hardware.cpu.registers),\r\n    RotateRightHWithCarry: hardware => rotateRight('h', true, hardware.cpu.registers),\r\n    RotateRightLWithCarry: hardware => rotateRight('l', true, hardware.cpu.registers),\r\n    RotateRightHLAddressWithCarry: hardware => rotateRightAddress(true, hardware),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation/RotateRight.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation/Set.ts":
/*!************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation/Set.ts ***!
  \************************************************************/
/*! exports provided: SetOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SetOperators\", function() { return SetOperators; });\nconst set = (name, mask, registers) => {\r\n    registers[name] = registers[name] & mask;\r\n    registers.m = 2;\r\n};\r\nconst setAddress = (mask, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const address = (registers.h << 8) + registers.l;\r\n    memory.writeByte(address, memory.readByte(address) & mask);\r\n    registers.m = 4;\r\n};\r\nconst operators = {};\r\n['a', 'b', 'c', 'd', 'e', 'h', 'l', 'm'].forEach((name) => {\r\n    let mask = 0x01;\r\n    for (let i = 0; i <= 7; i++) {\r\n        let key;\r\n        let callable;\r\n        if (name === 'm') {\r\n            key = `SetHLAddressBit${i}`;\r\n            callable = (hardware) => setAddress(mask, hardware);\r\n        }\r\n        else {\r\n            key = `Set${name.toUpperCase()}Bit${i}`;\r\n            callable = (hardware) => set(name, mask, hardware.cpu.registers);\r\n        }\r\n        operators[key] = callable;\r\n        mask *= 2;\r\n    }\r\n});\r\nconst SetOperators = operators;\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation/Set.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation/ShiftLeft.ts":
/*!******************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation/ShiftLeft.ts ***!
  \******************************************************************/
/*! exports provided: ShiftLeftOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShiftLeftOperators\", function() { return ShiftLeftOperators; });\nconst shiftLeft = (name, registers) => {\r\n    const co = registers[name] & 0x80 ? 0x10 : 0;\r\n    registers[name] = (registers[name] << 1) & 255;\r\n    registers.flags = registers[name] ? 0 : 0x80;\r\n    registers.flags = (registers.flags & 0xEF) + co;\r\n    registers.m = 2;\r\n};\r\nconst shiftLeftUndoc = (name, registers) => {\r\n    const co = registers[name] & 0x80 ? 0x10 : 0;\r\n    registers[name] = ((registers[name] << 1) & 255) + 1;\r\n    registers.flags = registers[name] ? 0 : 0x80;\r\n    registers.flags = (registers.flags & 0xEF) + co;\r\n    registers.m = 2;\r\n};\r\nconst ShiftLeftOperators = {\r\n    ShiftLeftA: hardware => shiftLeft('a', hardware.cpu.registers),\r\n    ShiftLeftB: hardware => shiftLeft('b', hardware.cpu.registers),\r\n    ShiftLeftC: hardware => shiftLeft('c', hardware.cpu.registers),\r\n    ShiftLeftD: hardware => shiftLeft('d', hardware.cpu.registers),\r\n    ShiftLeftE: hardware => shiftLeft('e', hardware.cpu.registers),\r\n    ShiftLeftH: hardware => shiftLeft('h', hardware.cpu.registers),\r\n    ShiftLeftL: hardware => shiftLeft('l', hardware.cpu.registers),\r\n    ShiftLeftAUndoc: hardware => shiftLeftUndoc('a', hardware.cpu.registers),\r\n    ShiftLeftBUndoc: hardware => shiftLeftUndoc('b', hardware.cpu.registers),\r\n    ShiftLeftCUndoc: hardware => shiftLeftUndoc('c', hardware.cpu.registers),\r\n    ShiftLeftDUndoc: hardware => shiftLeftUndoc('d', hardware.cpu.registers),\r\n    ShiftLeftEUndoc: hardware => shiftLeftUndoc('e', hardware.cpu.registers),\r\n    ShiftLeftHUndoc: hardware => shiftLeftUndoc('h', hardware.cpu.registers),\r\n    ShiftLeftLUndoc: hardware => shiftLeftUndoc('l', hardware.cpu.registers),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation/ShiftLeft.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/BitManipulation/Test.ts":
/*!*************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/BitManipulation/Test.ts ***!
  \*************************************************************/
/*! exports provided: TestOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TestOperators\", function() { return TestOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst test = (name, mask, registers) => {\r\n    registers.flags = registers[name] & mask ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 2;\r\n};\r\nconst testAddress = (mask, hardware) => {\r\n    const registers = hardware.cpu.registers;\r\n    registers.flags = hardware.memory.readByte((registers.h << 8) + registers.l) & mask ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 3;\r\n};\r\nconst operators = {};\r\n['a', 'b', 'c', 'd', 'e', 'h', 'l', 'm'].forEach((name) => {\r\n    let mask = 0x01;\r\n    for (let i = 0; i <= 7; i++) {\r\n        let key;\r\n        let callable;\r\n        if (name === 'm') {\r\n            key = `TestHLAddressBit${i}`;\r\n            callable = (hardware) => testAddress(mask, hardware);\r\n        }\r\n        else {\r\n            key = `Test${name.toUpperCase()}Bit${i}`;\r\n            callable = (hardware) => test(name, mask, hardware.cpu.registers);\r\n        }\r\n        operators[key] = callable;\r\n        mask *= 2;\r\n    }\r\n});\r\nconst TestOperators = operators;\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/BitManipulation/Test.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Bitwise.ts":
/*!************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Bitwise.ts ***!
  \************************************************/
/*! exports provided: BitwiseOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitwiseOperators\", function() { return BitwiseOperators; });\n/* harmony import */ var _Bitwise_And__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bitwise/And */ \"./src/Emulator/CPU/Operations/Bitwise/And.ts\");\n/* harmony import */ var _Bitwise_Or__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bitwise/Or */ \"./src/Emulator/CPU/Operations/Bitwise/Or.ts\");\n/* harmony import */ var _Bitwise_Xor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Bitwise/Xor */ \"./src/Emulator/CPU/Operations/Bitwise/Xor.ts\");\n\r\n\r\n\r\nconst BitwiseOperators = Object.assign({}, _Bitwise_And__WEBPACK_IMPORTED_MODULE_0__[\"BitAndOperators\"], _Bitwise_Or__WEBPACK_IMPORTED_MODULE_1__[\"BitOrOperators\"], _Bitwise_Xor__WEBPACK_IMPORTED_MODULE_2__[\"BitXorOperators\"]);\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Bitwise.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Bitwise/And.ts":
/*!****************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Bitwise/And.ts ***!
  \****************************************************/
/*! exports provided: BitAndOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitAndOperators\", function() { return BitAndOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst and = (value, registers) => {\r\n    registers.a &= value;\r\n    registers.a &= 255;\r\n    registers.flags = registers.a ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 1;\r\n};\r\nconst andAddress = (address, hardware) => {\r\n    const registers = hardware.cpu.registers;\r\n    and(hardware.memory.readByte(address), registers);\r\n    registers.m = 2;\r\n};\r\nconst BitAndOperators = {\r\n    BitAndA: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndB: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndC: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndD: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndE: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndH: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndL: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitAndHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        andAddress((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    BitAndPCAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        andAddress(registers.programCount++, hardware);\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Bitwise/And.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Bitwise/Or.ts":
/*!***************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Bitwise/Or.ts ***!
  \***************************************************/
/*! exports provided: BitOrOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitOrOperators\", function() { return BitOrOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst or = (value, registers) => {\r\n    registers.a |= value;\r\n    registers.a &= 255;\r\n    registers.flags = registers.a ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 1;\r\n};\r\nconst orAddress = (address, hardware) => {\r\n    const registers = hardware.cpu.registers;\r\n    or(hardware.memory.readByte(address), registers);\r\n    registers.m = 2;\r\n};\r\nconst BitOrOperators = {\r\n    BitOrA: hardware => or(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitOrB: hardware => or(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    BitOrC: hardware => or(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    BitOrD: hardware => or(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    BitOrE: hardware => or(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    BitOrH: hardware => or(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    BitOrL: hardware => or(hardware.cpu.registers.l, hardware.cpu.registers),\r\n    BitOrHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        orAddress((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    BitOrPCAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        orAddress(registers.programCount++, hardware);\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Bitwise/Or.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Bitwise/Xor.ts":
/*!****************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Bitwise/Xor.ts ***!
  \****************************************************/
/*! exports provided: BitXorOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitXorOperators\", function() { return BitXorOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst xor = (value, registers) => {\r\n    registers.a ^= value;\r\n    registers.a &= 255;\r\n    registers.flags = registers.a ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 1;\r\n};\r\nconst xorAddress = (address, hardware) => {\r\n    xor(hardware.memory.readByte(address), hardware.cpu.registers);\r\n    hardware.cpu.registers.m = 2;\r\n};\r\nconst BitXorOperators = {\r\n    BitXorA: hardware => xor(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    BitXorB: hardware => xor(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    BitXorC: hardware => xor(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    BitXorD: hardware => xor(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    BitXorE: hardware => xor(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    BitXorH: hardware => xor(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    BitXorL: hardware => xor(hardware.cpu.registers.l, hardware.cpu.registers),\r\n    BitXorHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        xorAddress((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    BitXorPCAddress: hardware => xorAddress(hardware.cpu.registers.programCount++, hardware),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Bitwise/Xor.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Compare.ts":
/*!************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Compare.ts ***!
  \************************************************/
/*! exports provided: CompareOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompareOperators\", function() { return CompareOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst registerCompare = (value, registers) => {\r\n    const i = registers.a - value;\r\n    registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].OPERATION;\r\n    if (!(i & 255))\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    if (i < 255)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY;\r\n    registers.m = 1;\r\n};\r\nconst CompareOperators = {\r\n    Compare_RegisterA: hardware => registerCompare(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    Compare_RegisterB: hardware => registerCompare(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    Compare_RegisterC: hardware => registerCompare(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    Compare_RegisterD: hardware => registerCompare(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    Compare_RegisterE: hardware => registerCompare(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    Compare_RegisterH: hardware => registerCompare(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    Compare_RegisterL: hardware => registerCompare(hardware.cpu.registers.l, hardware.cpu.registers),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Compare.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Decrement.ts":
/*!**************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Decrement.ts ***!
  \**************************************************/
/*! exports provided: DecrementOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DecrementOperators\", function() { return DecrementOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst decrement = (name, registers) => {\r\n    registers[name] = (registers[name] - 1) & 255;\r\n    registers.flags = registers[name] ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 1;\r\n};\r\nconst decrementAddress = (address, hardware) => {\r\n    const memory = hardware.memory;\r\n    const value = (memory.readByte(address) - 1) & 255;\r\n    memory.writeByte(address, value);\r\n    hardware.cpu.registers.flags = value ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    hardware.cpu.registers.m = 3;\r\n};\r\nconst decrement16 = (highReg, lowReg, registers) => {\r\n    registers[lowReg] = (registers[lowReg] - 1) & 255;\r\n    if (!registers[lowReg])\r\n        registers[highReg] = (registers[highReg] - 1) & 255;\r\n    registers.m = 1;\r\n};\r\nconst DecrementOperators = {\r\n    DecrementA: hardware => decrement('a', hardware.cpu.registers),\r\n    DecrementB: hardware => decrement('b', hardware.cpu.registers),\r\n    DecrementC: hardware => decrement('c', hardware.cpu.registers),\r\n    DecrementD: hardware => decrement('d', hardware.cpu.registers),\r\n    DecrementE: hardware => decrement('e', hardware.cpu.registers),\r\n    DecrementH: hardware => decrement('h', hardware.cpu.registers),\r\n    DecrementL: hardware => decrement('l', hardware.cpu.registers),\r\n    DecrementHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        decrementAddress((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    DecrementBC: hardware => decrement16('b', 'c', hardware.cpu.registers),\r\n    DecrementDE: hardware => decrement16('d', 'e', hardware.cpu.registers),\r\n    DecrementHL: hardware => decrement16('h', 'l', hardware.cpu.registers),\r\n    DecrementSP: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        registers.stackPointer = (registers.stackPointer - 1) & 65535;\r\n        registers.m = 1;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Decrement.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Extra.ts":
/*!**********************************************!*\
  !*** ./src/Emulator/CPU/Operations/Extra.ts ***!
  \**********************************************/
/*! exports provided: ExtraOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExtraOperators\", function() { return ExtraOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst ExtraOperators = {\r\n    BCDCorrect: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        const original = registers.a;\r\n        if ((registers.flags & _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].HALF_CARRY) || (registers.a & 15) > 9)\r\n            registers.a += 6;\r\n        registers.flags &= 0xEF;\r\n        if ((registers.flags & _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].HALF_CARRY) || original > 0x99) {\r\n            registers.a += 0x60;\r\n            registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY;\r\n        }\r\n        registers.m = 1;\r\n    },\r\n    Noop: hardware => {\r\n        hardware.cpu.registers.m = 1;\r\n    },\r\n    NoImpl: hardware => {\r\n        const offset = hardware.cpu.registers.programCount - 1;\r\n        const opcode = hardware.memory.readByte(offset);\r\n        console.error(`Unimplemented instruction 0x${opcode.toString(16).toUpperCase()} at offset 0x${offset.toString(16).toUpperCase()}, stopping`);\r\n        hardware.cpu.stop = true;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Extra.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Increment.ts":
/*!**************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Increment.ts ***!
  \**************************************************/
/*! exports provided: IncrementOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IncrementOperators\", function() { return IncrementOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst increment = (name, registers) => {\r\n    registers[name] = (registers[name] + 1) & 255;\r\n    registers.flags = registers[name] ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    registers.m = 1;\r\n};\r\nconst incrementAddress = (address, hardware) => {\r\n    const memory = hardware.memory;\r\n    const value = (memory.readByte(address) + 1) & 255;\r\n    memory.writeByte(address, value);\r\n    hardware.cpu.registers.flags = value ? 0 : _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    hardware.cpu.registers.m = 3;\r\n};\r\nconst increment16 = (highReg, lowReg, registers) => {\r\n    registers[lowReg] = (registers[lowReg] + 1) & 255;\r\n    if (!registers[lowReg])\r\n        registers[highReg] = (registers[highReg] + 1) & 255;\r\n    registers.m = 1;\r\n};\r\nconst IncrementOperators = {\r\n    IncrementA: hardware => increment('a', hardware.cpu.registers),\r\n    IncrementB: hardware => increment('b', hardware.cpu.registers),\r\n    IncrementC: hardware => increment('c', hardware.cpu.registers),\r\n    IncrementD: hardware => increment('d', hardware.cpu.registers),\r\n    IncrementE: hardware => increment('e', hardware.cpu.registers),\r\n    IncrementH: hardware => increment('h', hardware.cpu.registers),\r\n    IncrementL: hardware => increment('l', hardware.cpu.registers),\r\n    IncrementHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        incrementAddress((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    IncrementBC: hardware => increment16('b', 'c', hardware.cpu.registers),\r\n    IncrementDE: hardware => increment16('d', 'e', hardware.cpu.registers),\r\n    IncrementHL: hardware => increment16('h', 'l', hardware.cpu.registers),\r\n    IncrementSP: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        registers.stackPointer = (registers.stackPointer + 1) & 65535;\r\n        registers.m = 1;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Increment.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore.ts":
/*!**************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore.ts ***!
  \**************************************************/
/*! exports provided: LoadStoreOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoadStoreOperators\", function() { return LoadStoreOperators; });\n/* harmony import */ var _LoadStore_MemoryToMemory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LoadStore/MemoryToMemory */ \"./src/Emulator/CPU/Operations/LoadStore/MemoryToMemory.ts\");\n/* harmony import */ var _LoadStore_MemoryToRegister__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LoadStore/MemoryToRegister */ \"./src/Emulator/CPU/Operations/LoadStore/MemoryToRegister.ts\");\n/* harmony import */ var _LoadStore_ProgramCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LoadStore/ProgramCount */ \"./src/Emulator/CPU/Operations/LoadStore/ProgramCount.ts\");\n/* harmony import */ var _LoadStore_RegisterToMemory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LoadStore/RegisterToMemory */ \"./src/Emulator/CPU/Operations/LoadStore/RegisterToMemory.ts\");\n/* harmony import */ var _LoadStore_RegisterToRegister__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LoadStore/RegisterToRegister */ \"./src/Emulator/CPU/Operations/LoadStore/RegisterToRegister.ts\");\n/* harmony import */ var _LoadStore_Swap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LoadStore/Swap */ \"./src/Emulator/CPU/Operations/LoadStore/Swap.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst LoadStoreOperators = Object.assign({}, _LoadStore_MemoryToMemory__WEBPACK_IMPORTED_MODULE_0__[\"MemoryToMemoryOperators\"], _LoadStore_MemoryToRegister__WEBPACK_IMPORTED_MODULE_1__[\"MemoryToRegisterOperators\"], _LoadStore_ProgramCount__WEBPACK_IMPORTED_MODULE_2__[\"ProgramCountOperators\"], _LoadStore_RegisterToMemory__WEBPACK_IMPORTED_MODULE_3__[\"RegisterToMemoryOperators\"], _LoadStore_RegisterToRegister__WEBPACK_IMPORTED_MODULE_4__[\"RegisterToRegisterOperators\"], _LoadStore_Swap__WEBPACK_IMPORTED_MODULE_5__[\"SwapOperators\"]);\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore/MemoryToMemory.ts":
/*!*****************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore/MemoryToMemory.ts ***!
  \*****************************************************************/
/*! exports provided: MemoryToMemoryOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MemoryToMemoryOperators\", function() { return MemoryToMemoryOperators; });\nconst MemoryToMemoryOperators = {\r\n    LoadPCIntoHLAddress: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte((registers.h << 8) + registers.l, memory.readByte(registers.programCount++));\r\n        registers.m = 3;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore/MemoryToMemory.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore/MemoryToRegister.ts":
/*!*******************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore/MemoryToRegister.ts ***!
  \*******************************************************************/
/*! exports provided: MemoryToRegisterOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MemoryToRegisterOperators\", function() { return MemoryToRegisterOperators; });\nconst loadMemoryToRegister = (destination, highReg, lowReg, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const high = registers[highReg];\r\n    const low = registers[lowReg];\r\n    registers[destination] = memory.readByte((high << 8) + low);\r\n    registers.m = 2;\r\n};\r\nconst loadHLMemoryToRegister = (destination, hardware) => {\r\n    loadMemoryToRegister(destination, 'h', 'l', hardware);\r\n};\r\nconst loadPCAndNextIntoRegister = (destinationA, destinationB, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    registers[destinationA] = memory.readByte(registers.programCount++);\r\n    registers[destinationB] = memory.readByte(registers.programCount++);\r\n    registers.m = 3;\r\n};\r\nconst MemoryToRegisterOperators = {\r\n    LoadHLAddressIntoA: hardware => loadHLMemoryToRegister('a', hardware),\r\n    LoadHLAddressIntoB: hardware => loadHLMemoryToRegister('b', hardware),\r\n    LoadHLAddressIntoC: hardware => loadHLMemoryToRegister('c', hardware),\r\n    LoadHLAddressIntoD: hardware => loadHLMemoryToRegister('d', hardware),\r\n    LoadHLAddressIntoE: hardware => loadHLMemoryToRegister('e', hardware),\r\n    LoadHLAddressIntoH: hardware => loadHLMemoryToRegister('h', hardware),\r\n    LoadHLAddressIntoL: hardware => loadHLMemoryToRegister('l', hardware),\r\n    LoadBCAddressIntoA: hardware => loadMemoryToRegister('a', 'b', 'c', hardware),\r\n    LoadDEAddressIntoA: hardware => loadMemoryToRegister('a', 'd', 'e', hardware),\r\n    LoadPCAndNextIntoBC: hardware => loadPCAndNextIntoRegister('b', 'c', hardware),\r\n    LoadPCAndNextIntoDE: hardware => loadPCAndNextIntoRegister('d', 'e', hardware),\r\n    LoadPCAndNextIntoHL: hardware => loadPCAndNextIntoRegister('h', 'l', hardware),\r\n    LoadPCAndNextIntoSP: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        registers.stackPointer = hardware.memory.readWord(registers.programCount);\r\n        registers.programCount += 2;\r\n        registers.m = 3;\r\n    },\r\n    LoadPCWordIntoLH: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        const index = memory.readWord(registers.programCount);\r\n        registers.programCount += 2;\r\n        // TODO Should this be reversed?\r\n        registers.l = memory.readByte(index);\r\n        registers.h = memory.readByte(index + 1);\r\n        registers.m = 5;\r\n    },\r\n    LoadHLAddressIntoAAndIncrement: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        registers.a = memory.readByte((registers.h << 8) + registers.l);\r\n        registers.l = (registers.l + 1) & 255;\r\n        if (!registers.l)\r\n            registers.h = (registers.h + 1) & 255;\r\n        registers.m = 2;\r\n    },\r\n    LoadHLAddressIntoAAndDecrement: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        registers.a = memory.readByte((registers.h << 8) + registers.l);\r\n        registers.l = (registers.l - 1) & 255;\r\n        if (registers.l === 255)\r\n            registers.h = (registers.h - 1) & 255;\r\n        registers.m = 2;\r\n    },\r\n    LoadPCWithMagicIntoA: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        registers.a = memory.readByte(0xFF00 + memory.readByte(registers.programCount++));\r\n        registers.m = 3;\r\n    },\r\n    LoadCWithMagicAddressIntoA: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        registers.a = memory.readByte(0xFF00 + registers.c);\r\n        registers.m = 2;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore/MemoryToRegister.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore/ProgramCount.ts":
/*!***************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore/ProgramCount.ts ***!
  \***************************************************************/
/*! exports provided: ProgramCountOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProgramCountOperators\", function() { return ProgramCountOperators; });\nconst pcToRegisterAndAdvance = (destination, memory, registers) => {\r\n    registers[destination] = memory.readByte(registers.programCount++);\r\n};\r\nconst ProgramCountOperators = {\r\n    LoadPCToA_Advance: hardware => pcToRegisterAndAdvance('a', hardware.memory, hardware.cpu.registers),\r\n    LoadPCToB_Advance: hardware => pcToRegisterAndAdvance('b', hardware.memory, hardware.cpu.registers),\r\n    LoadPCToC_Advance: hardware => pcToRegisterAndAdvance('c', hardware.memory, hardware.cpu.registers),\r\n    LoadPCToD_Advance: hardware => pcToRegisterAndAdvance('d', hardware.memory, hardware.cpu.registers),\r\n    LoadPCToE_Advance: hardware => pcToRegisterAndAdvance('e', hardware.memory, hardware.cpu.registers),\r\n    LoadPCToH_Advance: hardware => pcToRegisterAndAdvance('h', hardware.memory, hardware.cpu.registers),\r\n    LoadPCToL_Advance: hardware => pcToRegisterAndAdvance('l', hardware.memory, hardware.cpu.registers),\r\n    LoadPCWordIntoA: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        registers.a = memory.readByte(memory.readWord(registers.programCount));\r\n        registers.programCount += 2;\r\n        registers.m = 4;\r\n    },\r\n    LoadPCWordIntoHL: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        const index = memory.readWord(registers.programCount);\r\n        registers.programCount += 2;\r\n        memory.writeWord(index, (registers.h << 8) + registers.l);\r\n        registers.m = 5;\r\n    },\r\n    SomeCrazyShitWithHLAndSP: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        let i = memory.readByte(registers.programCount++);\r\n        if (i > 127)\r\n            i = -((~i + 1) & 255);\r\n        i += registers.stackPointer;\r\n        registers.h = (i >> 8) & 255;\r\n        registers.l = i & 255;\r\n        registers.m = 3;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore/ProgramCount.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore/RegisterToMemory.ts":
/*!*******************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore/RegisterToMemory.ts ***!
  \*******************************************************************/
/*! exports provided: RegisterToMemoryOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RegisterToMemoryOperators\", function() { return RegisterToMemoryOperators; });\nconst loadRegisterToMemory = (source, highReg, lowReg, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const high = registers[highReg];\r\n    const low = registers[lowReg];\r\n    memory.writeByte((high << 8) + low, registers[source]);\r\n    registers.m = 2;\r\n};\r\nconst loadRegisterToHLMemory = (source, hardware) => {\r\n    loadRegisterToMemory(source, 'h', 'l', hardware);\r\n};\r\nconst RegisterToMemoryOperators = {\r\n    LoadAIntoHLAddress: hardware => loadRegisterToHLMemory('a', hardware),\r\n    LoadBIntoHLAddress: hardware => loadRegisterToHLMemory('b', hardware),\r\n    LoadCIntoHLAddress: hardware => loadRegisterToHLMemory('c', hardware),\r\n    LoadDIntoHLAddress: hardware => loadRegisterToHLMemory('d', hardware),\r\n    LoadEIntoHLAddress: hardware => loadRegisterToHLMemory('e', hardware),\r\n    LoadHIntoHLAddress: hardware => loadRegisterToHLMemory('h', hardware),\r\n    LoadLIntoHLAddress: hardware => loadRegisterToHLMemory('l', hardware),\r\n    LoadAIntoBCAddress: hardware => loadRegisterToMemory('a', 'b', 'c', hardware),\r\n    LoadAIntoDEAddress: hardware => loadRegisterToMemory('a', 'd', 'e', hardware),\r\n    LoadAIntoPCAddress: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte(memory.readWord(registers.programCount), registers.a);\r\n        registers.programCount += 2;\r\n        registers.m = 4;\r\n    },\r\n    LoadAIntoHLAddressAndIncrement: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte((registers.h << 8) + registers.l, registers.a);\r\n        registers.l = (registers.l + 1) & 255;\r\n        if (!registers.l)\r\n            registers.h = (registers.h + 1) & 255;\r\n        registers.m = 2;\r\n    },\r\n    LoadAIntoHLAddressAndDecrement: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte((registers.h << 8) + registers.l, registers.a);\r\n        registers.l = (registers.l - 1) & 255;\r\n        if (registers.l === 255)\r\n            registers.h = (registers.h - 1) & 255;\r\n        registers.m = 2;\r\n    },\r\n    LoadAIntoPCWithMagicAddress: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte(0xFF00 + memory.readByte(registers.programCount++), registers.a);\r\n        registers.m = 3;\r\n    },\r\n    LoadAIntoCWithMagicAddress: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte(0xFF00 + registers.c, registers.a);\r\n        registers.m = 2;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore/RegisterToMemory.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore/RegisterToRegister.ts":
/*!*********************************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore/RegisterToRegister.ts ***!
  \*********************************************************************/
/*! exports provided: RegisterToRegisterOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RegisterToRegisterOperators\", function() { return RegisterToRegisterOperators; });\nconst writeToRegister = (destination, source, registers) => {\r\n    registers[destination] = source;\r\n    registers.m = 1;\r\n};\r\nconst RegisterToRegisterOperators = {\r\n    LoadRegAA: hardware => writeToRegister('a', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegAB: hardware => writeToRegister('a', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegAC: hardware => writeToRegister('a', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegAD: hardware => writeToRegister('a', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegAE: hardware => writeToRegister('a', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegAH: hardware => writeToRegister('a', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegAL: hardware => writeToRegister('a', hardware.cpu.registers.l, hardware.cpu.registers),\r\n    LoadRegBA: hardware => writeToRegister('b', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegBB: hardware => writeToRegister('b', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegBC: hardware => writeToRegister('b', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegBD: hardware => writeToRegister('b', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegBE: hardware => writeToRegister('b', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegBH: hardware => writeToRegister('b', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegBL: hardware => writeToRegister('b', hardware.cpu.registers.l, hardware.cpu.registers),\r\n    LoadRegCA: hardware => writeToRegister('c', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegCB: hardware => writeToRegister('c', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegCC: hardware => writeToRegister('c', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegCD: hardware => writeToRegister('c', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegCE: hardware => writeToRegister('c', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegCH: hardware => writeToRegister('c', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegCL: hardware => writeToRegister('c', hardware.cpu.registers.l, hardware.cpu.registers),\r\n    LoadRegDA: hardware => writeToRegister('d', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegDB: hardware => writeToRegister('d', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegDC: hardware => writeToRegister('d', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegDD: hardware => writeToRegister('d', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegDE: hardware => writeToRegister('d', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegDH: hardware => writeToRegister('d', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegDL: hardware => writeToRegister('d', hardware.cpu.registers.l, hardware.cpu.registers),\r\n    LoadRegEA: hardware => writeToRegister('e', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegEB: hardware => writeToRegister('e', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegEC: hardware => writeToRegister('e', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegED: hardware => writeToRegister('e', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegEE: hardware => writeToRegister('e', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegEH: hardware => writeToRegister('e', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegEL: hardware => writeToRegister('e', hardware.cpu.registers.l, hardware.cpu.registers),\r\n    LoadRegHA: hardware => writeToRegister('h', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegHB: hardware => writeToRegister('h', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegHC: hardware => writeToRegister('h', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegHD: hardware => writeToRegister('h', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegHE: hardware => writeToRegister('h', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegHH: hardware => writeToRegister('h', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegHL: hardware => writeToRegister('h', hardware.cpu.registers.l, hardware.cpu.registers),\r\n    LoadRegLA: hardware => writeToRegister('l', hardware.cpu.registers.a, hardware.cpu.registers),\r\n    LoadRegLB: hardware => writeToRegister('l', hardware.cpu.registers.b, hardware.cpu.registers),\r\n    LoadRegLC: hardware => writeToRegister('l', hardware.cpu.registers.c, hardware.cpu.registers),\r\n    LoadRegLD: hardware => writeToRegister('l', hardware.cpu.registers.d, hardware.cpu.registers),\r\n    LoadRegLE: hardware => writeToRegister('l', hardware.cpu.registers.e, hardware.cpu.registers),\r\n    LoadRegLH: hardware => writeToRegister('l', hardware.cpu.registers.h, hardware.cpu.registers),\r\n    LoadRegLL: hardware => writeToRegister('l', hardware.cpu.registers.l, hardware.cpu.registers),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore/RegisterToRegister.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/LoadStore/Swap.ts":
/*!*******************************************************!*\
  !*** ./src/Emulator/CPU/Operations/LoadStore/Swap.ts ***!
  \*******************************************************/
/*! exports provided: SwapOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SwapOperators\", function() { return SwapOperators; });\nconst swap = (register, registers) => {\r\n    const value = registers[register];\r\n    registers[register] = ((value & 0xF) << 4) | ((value & 0xF0) >> 4);\r\n};\r\nconst SwapOperators = {\r\n    SwapNibblesA: hardware => swap('a', hardware.cpu.registers),\r\n    SwapNibblesB: hardware => swap('b', hardware.cpu.registers),\r\n    SwapNibblesC: hardware => swap('c', hardware.cpu.registers),\r\n    SwapNibblesD: hardware => swap('d', hardware.cpu.registers),\r\n    SwapNibblesE: hardware => swap('e', hardware.cpu.registers),\r\n    SwapNibblesH: hardware => swap('h', hardware.cpu.registers),\r\n    SwapNibblesL: hardware => swap('l', hardware.cpu.registers),\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/LoadStore/Swap.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Stack.ts":
/*!**********************************************!*\
  !*** ./src/Emulator/CPU/Operations/Stack.ts ***!
  \**********************************************/
/*! exports provided: StackOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StackOperators\", function() { return StackOperators; });\nconst StackOperators = {\r\n    PushBC: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        memory.writeByte(--registers.stackPointer, registers.b);\r\n        memory.writeByte(--registers.stackPointer, registers.c);\r\n        registers.m = 3;\r\n    },\r\n    PopHL: hardware => {\r\n        const memory = hardware.memory;\r\n        const registers = hardware.cpu.registers;\r\n        registers.l = memory.readByte(registers.stackPointer++);\r\n        registers.h = memory.readByte(registers.stackPointer++);\r\n        registers.m = 3;\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Stack.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/Subtract.ts":
/*!*************************************************!*\
  !*** ./src/Emulator/CPU/Operations/Subtract.ts ***!
  \*************************************************/
/*! exports provided: SubtractOperators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubtractOperators\", function() { return SubtractOperators; });\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\nconst setFlags = (result, value, original, registers) => {\r\n    registers.flags = _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].OPERATION;\r\n    if (result < 0)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY;\r\n    result &= 255;\r\n    if (!result)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].ZERO;\r\n    if (result ^ value ^ original)\r\n        registers.flags |= _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].HALF_CARRY;\r\n};\r\nconst finalize = (value, original, registers) => {\r\n    setFlags(registers.a, value, original, registers);\r\n    registers.a &= 255;\r\n};\r\nconst subtract = (value, registers) => {\r\n    const original = registers.a;\r\n    registers.a -= value;\r\n    finalize(value, original, registers);\r\n    registers.m = 1;\r\n};\r\nconst subtractAddress = (address, hardware) => {\r\n    const memory = hardware.memory;\r\n    const registers = hardware.cpu.registers;\r\n    const original = registers.a;\r\n    const value = memory.readByte(address);\r\n    registers.a -= value;\r\n    finalize(value, original, registers);\r\n    registers.m = 2;\r\n};\r\nconst subtractWithCarry = (value, registers) => {\r\n    const original = registers.a;\r\n    registers.a -= value;\r\n    registers.a -= registers.flags & _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY ? 1 : 0;\r\n    finalize(value, original, registers);\r\n    registers.m = 1;\r\n};\r\nconst subtractAddressWithCarry = (address, hardware) => {\r\n    const registers = hardware.cpu.registers;\r\n    const original = registers.a;\r\n    const value = hardware.memory.readByte(address);\r\n    registers.a -= value;\r\n    registers.a -= registers.flags & _Registers__WEBPACK_IMPORTED_MODULE_0__[\"RegisterFlag\"].CARRY ? 1 : 0;\r\n    finalize(value, original, registers);\r\n    registers.m = 2;\r\n};\r\nconst setSubtractFlags = (value, hardware) => {\r\n    const registers = hardware.cpu.registers;\r\n    const original = registers.a;\r\n    setFlags(original - value, value, original, registers);\r\n    registers.m = 1;\r\n};\r\nconst setSubtractAddressFlags = (address, hardware) => {\r\n    const registers = hardware.cpu.registers;\r\n    const original = registers.a;\r\n    const value = hardware.memory.readByte(address);\r\n    setFlags(original - value, value, original, registers);\r\n    registers.m = 2;\r\n};\r\nconst SubtractOperators = {\r\n    SubtractA: hardware => subtract(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    SubtractB: hardware => subtract(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    SubtractC: hardware => subtract(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    SubtractD: hardware => subtract(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    SubtractE: hardware => subtract(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    SubtractH: hardware => subtract(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    SubtractL: hardware => subtract(hardware.cpu.registers.l, hardware.cpu.registers),\r\n    SubtractHLAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        subtractAddress((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    SubtractPCAddress: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        subtractAddress(registers.programCount++, hardware);\r\n    },\r\n    SubtractAWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.a, hardware.cpu.registers),\r\n    SubtractBWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.b, hardware.cpu.registers),\r\n    SubtractCWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.c, hardware.cpu.registers),\r\n    SubtractDWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.d, hardware.cpu.registers),\r\n    SubtractEWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.e, hardware.cpu.registers),\r\n    SubtractHWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.h, hardware.cpu.registers),\r\n    SubtractLWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.l, hardware.cpu.registers),\r\n    SubtractHLAddressWithCarry: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        subtractAddressWithCarry((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    SubtractPCAddressWithCarry: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        subtractAddressWithCarry(registers.programCount++, hardware);\r\n    },\r\n    SetSubtractAFlags: hardware => setSubtractFlags(hardware.cpu.registers.a, hardware),\r\n    SetSubtractBFlags: hardware => setSubtractFlags(hardware.cpu.registers.b, hardware),\r\n    SetSubtractCFlags: hardware => setSubtractFlags(hardware.cpu.registers.c, hardware),\r\n    SetSubtractDFlags: hardware => setSubtractFlags(hardware.cpu.registers.d, hardware),\r\n    SetSubtractEFlags: hardware => setSubtractFlags(hardware.cpu.registers.e, hardware),\r\n    SetSubtractHFlags: hardware => setSubtractFlags(hardware.cpu.registers.h, hardware),\r\n    SetSubtractLFlags: hardware => setSubtractFlags(hardware.cpu.registers.l, hardware),\r\n    SetSubtractHLAddressFlags: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        setSubtractAddressFlags((registers.h << 8) + registers.l, hardware);\r\n    },\r\n    SetSubtractPCAddressFlags: hardware => {\r\n        const registers = hardware.cpu.registers;\r\n        setSubtractAddressFlags(registers.programCount++, hardware);\r\n    },\r\n};\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/Subtract.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Operations/mappings.ts":
/*!*************************************************!*\
  !*** ./src/Emulator/CPU/Operations/mappings.ts ***!
  \*************************************************/
/*! exports provided: toOpcodeMap, toCbcodeMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toOpcodeMap\", function() { return toOpcodeMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toCbcodeMap\", function() { return toCbcodeMap; });\nconst toOpcodeMap = (operators) => [\r\n    // 0x00\r\n    operators.Noop, operators.LoadPCAndNextIntoBC, operators.LoadAIntoBCAddress, operators.IncrementBC,\r\n    operators.IncrementB, operators.DecrementB, operators.LoadPCToB_Advance, operators.RotateLeftAWithCarry,\r\n    operators.LoadPCAndNextIntoSP, operators.AddBCToHL, operators.LoadBCAddressIntoA, operators.DecrementBC,\r\n    operators.IncrementC, operators.DecrementC, operators.LoadPCToC_Advance, operators.RotateRightAWithCarry,\r\n    // 0x10\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x20\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x30\r\n    operators.NoImpl, operators.LoadPCAndNextIntoSP, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x40\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x50\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x60\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x70\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x80\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0x90\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0xA0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0xB0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0xC0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0xD0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0xE0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // 0xF0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.SetSubtractPCAddressFlags, operators.NoImpl,\r\n];\r\nconst toCbcodeMap = (operators) => [\r\n    // CB 0x00\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x10\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x30\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x40\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x50\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x60\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x70\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x80\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0x90\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0xA0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0xB0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0xC0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0xD0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0xE0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    // CB 0xF0\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n    operators.NoImpl, operators.NoImpl, operators.NoImpl, operators.NoImpl,\r\n];\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Operations/mappings.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/Registers.ts":
/*!***************************************!*\
  !*** ./src/Emulator/CPU/Registers.ts ***!
  \***************************************/
/*! exports provided: RegisterFlag, RegisterSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RegisterFlag\", function() { return RegisterFlag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RegisterSet\", function() { return RegisterSet; });\n/* harmony import */ var _Clock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Clock */ \"./src/Emulator/CPU/Clock.ts\");\n\r\nvar RegisterFlag;\r\n(function (RegisterFlag) {\r\n    RegisterFlag[RegisterFlag[\"CARRY\"] = 16] = \"CARRY\";\r\n    RegisterFlag[RegisterFlag[\"HALF_CARRY\"] = 32] = \"HALF_CARRY\";\r\n    RegisterFlag[RegisterFlag[\"OPERATION\"] = 64] = \"OPERATION\";\r\n    RegisterFlag[RegisterFlag[\"ZERO\"] = 128] = \"ZERO\";\r\n})(RegisterFlag || (RegisterFlag = {}));\r\nclass RegisterSet {\r\n    constructor(clock) {\r\n        this.clock = clock || new _Clock__WEBPACK_IMPORTED_MODULE_0__[\"Clock\"]();\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.a = 0;\r\n        this.b = 0;\r\n        this.c = 0;\r\n        this.d = 0;\r\n        this.e = 0;\r\n        this.h = 0;\r\n        this.l = 0;\r\n        this.flags = 0;\r\n        this.stackPointer = 0;\r\n        this.programCount = 0;\r\n        this.clock.reset();\r\n    }\r\n    get m() {\r\n        return this.clock.m;\r\n    }\r\n    set m(value) {\r\n        this.clock.m = value;\r\n    }\r\n    get t() {\r\n        return this.clock.t;\r\n    }\r\n    set t(value) {\r\n        this.clock.t = value;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/Registers.ts?");

/***/ }),

/***/ "./src/Emulator/CPU/index.ts":
/*!***********************************!*\
  !*** ./src/Emulator/CPU/index.ts ***!
  \***********************************/
/*! exports provided: Cpu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cpu\", function() { return Cpu; });\n/* harmony import */ var _Clock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Clock */ \"./src/Emulator/CPU/Clock.ts\");\n/* harmony import */ var _Operations_Add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Operations/Add */ \"./src/Emulator/CPU/Operations/Add.ts\");\n/* harmony import */ var _Operations_BitManipulation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Operations/BitManipulation */ \"./src/Emulator/CPU/Operations/BitManipulation.ts\");\n/* harmony import */ var _Operations_Bitwise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Operations/Bitwise */ \"./src/Emulator/CPU/Operations/Bitwise.ts\");\n/* harmony import */ var _Operations_Compare__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Operations/Compare */ \"./src/Emulator/CPU/Operations/Compare.ts\");\n/* harmony import */ var _Operations_Decrement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Operations/Decrement */ \"./src/Emulator/CPU/Operations/Decrement.ts\");\n/* harmony import */ var _Operations_Extra__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Operations/Extra */ \"./src/Emulator/CPU/Operations/Extra.ts\");\n/* harmony import */ var _Operations_Increment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Operations/Increment */ \"./src/Emulator/CPU/Operations/Increment.ts\");\n/* harmony import */ var _Operations_LoadStore__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Operations/LoadStore */ \"./src/Emulator/CPU/Operations/LoadStore.ts\");\n/* harmony import */ var _Operations_mappings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Operations/mappings */ \"./src/Emulator/CPU/Operations/mappings.ts\");\n/* harmony import */ var _Operations_Stack__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Operations/Stack */ \"./src/Emulator/CPU/Operations/Stack.ts\");\n/* harmony import */ var _Operations_Subtract__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Operations/Subtract */ \"./src/Emulator/CPU/Operations/Subtract.ts\");\n/* harmony import */ var _Registers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Registers */ \"./src/Emulator/CPU/Registers.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Cpu {\r\n    constructor() {\r\n        this.halt = false;\r\n        this.stop = false;\r\n        this.hardware = null;\r\n        this.clock = new _Clock__WEBPACK_IMPORTED_MODULE_0__[\"Clock\"]();\r\n        this.registers = new _Registers__WEBPACK_IMPORTED_MODULE_12__[\"RegisterSet\"]();\r\n        this.operators = Object.assign({}, _Operations_Add__WEBPACK_IMPORTED_MODULE_1__[\"AddOperators\"], _Operations_BitManipulation__WEBPACK_IMPORTED_MODULE_2__[\"BitManipulationOperators\"], _Operations_Bitwise__WEBPACK_IMPORTED_MODULE_3__[\"BitwiseOperators\"], _Operations_Compare__WEBPACK_IMPORTED_MODULE_4__[\"CompareOperators\"], _Operations_Decrement__WEBPACK_IMPORTED_MODULE_5__[\"DecrementOperators\"], _Operations_Extra__WEBPACK_IMPORTED_MODULE_6__[\"ExtraOperators\"], _Operations_Increment__WEBPACK_IMPORTED_MODULE_7__[\"IncrementOperators\"], _Operations_LoadStore__WEBPACK_IMPORTED_MODULE_8__[\"LoadStoreOperators\"], _Operations_Stack__WEBPACK_IMPORTED_MODULE_10__[\"StackOperators\"], _Operations_Subtract__WEBPACK_IMPORTED_MODULE_11__[\"SubtractOperators\"]);\r\n        this.opcodes = Object(_Operations_mappings__WEBPACK_IMPORTED_MODULE_9__[\"toOpcodeMap\"])(this.operators);\r\n        this.cbcodes = Object(_Operations_mappings__WEBPACK_IMPORTED_MODULE_9__[\"toCbcodeMap\"])(this.operators);\r\n    }\r\n    setHardwareBus(hardware) {\r\n        this.hardware = hardware;\r\n    }\r\n    step() {\r\n        const op = this.hardware.memory.readByte(this.registers.programCount++);\r\n        this.opcodes[op](this.hardware);\r\n        this.registers.programCount &= 65535;\r\n        this.clock.m += this.registers.m;\r\n        this.clock.t += this.registers.t;\r\n        this.hardware.gpu.step();\r\n    }\r\n    exec() {\r\n        this.halt = false;\r\n        this.stop = false;\r\n        while (!this.halt && !this.stop)\r\n            this.step();\r\n    }\r\n    reset() {\r\n        this.clock.reset();\r\n        this.registers.reset();\r\n        this.halt = true;\r\n        this.stop = false;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/CPU/index.ts?");

/***/ }),

/***/ "./src/Emulator/GPU/Color.ts":
/*!***********************************!*\
  !*** ./src/Emulator/GPU/Color.ts ***!
  \***********************************/
/*! exports provided: Color, Palette */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Palette\", function() { return Palette; });\nclass Color {\r\n    constructor(data) {\r\n        this.data = data;\r\n    }\r\n    get r() {\r\n        return this.data[0];\r\n    }\r\n    set r(value) {\r\n        this.data[0] = value;\r\n    }\r\n    get g() {\r\n        return this.data[1];\r\n    }\r\n    set g(value) {\r\n        this.data[1] = value;\r\n    }\r\n    get b() {\r\n        return this.data[2];\r\n    }\r\n    set b(value) {\r\n        this.data[2] = value;\r\n    }\r\n    get a() {\r\n        return this.data[3];\r\n    }\r\n    set a(value) {\r\n        this.data[3] = value;\r\n    }\r\n    static fromRGB(r, g, b, a) {\r\n        return new Color([r, g, b, a]);\r\n    }\r\n}\r\nclass Palette {\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n    get(index) {\r\n        if (index < 0 || index > this.colors.length)\r\n            throw new Error(`Invalid palette index: ${index}`);\r\n        return this.colors[index];\r\n    }\r\n    reset() {\r\n        this.colors = [\r\n            Color.fromRGB(255, 255, 255, 255),\r\n            Color.fromRGB(192, 192, 192, 255),\r\n            Color.fromRGB(96, 96, 96, 255),\r\n            Color.fromRGB(0, 0, 0, 255),\r\n        ];\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/GPU/Color.ts?");

/***/ }),

/***/ "./src/Emulator/GPU/index.ts":
/*!***********************************!*\
  !*** ./src/Emulator/GPU/index.ts ***!
  \***********************************/
/*! exports provided: RenderingMode, Gpu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderingMode\", function() { return RenderingMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gpu\", function() { return Gpu; });\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ \"./src/Emulator/GPU/Color.ts\");\n\r\n/**\r\n * OAM_READ: 80 ticks\r\n * VRAM_READ: 172 ticks\r\n * HBLANK: 204 ticks\r\n *\r\n * Full line = OAM_READ + VRAM_READ + HBLANK = 456 ticks\r\n */\r\nvar RenderingMode;\r\n(function (RenderingMode) {\r\n    RenderingMode[RenderingMode[\"HBLANK\"] = 0] = \"HBLANK\";\r\n    RenderingMode[RenderingMode[\"VBLANK\"] = 1] = \"VBLANK\";\r\n    RenderingMode[RenderingMode[\"OAM_READ\"] = 2] = \"OAM_READ\";\r\n    RenderingMode[RenderingMode[\"VRAM_READ\"] = 3] = \"VRAM_READ\";\r\n})(RenderingMode || (RenderingMode = {}));\r\nclass Gpu {\r\n    constructor(canvas) {\r\n        this.scrollX = 0;\r\n        this.scrollY = 0;\r\n        this.bgMap = false;\r\n        this.bgTile = 0;\r\n        this.mode = RenderingMode.HBLANK;\r\n        this.modeClock = 0;\r\n        this.line = 0;\r\n        this.hardware = null;\r\n        this.canvas = canvas;\r\n        this.palette = new _Color__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        this.reset();\r\n    }\r\n    updateTile(address, value) {\r\n        address &= 0x1FFE;\r\n        const tile = (address >> 4) & 511;\r\n        const y = (address >> 1) & 7;\r\n        let sx;\r\n        for (let x = 0; x < 8; x++) {\r\n            sx = 1 << (7 - x);\r\n            this.tileset[tile][y][x] = (this.vram[address] & sx ? 1 : 0) + (this.vram[address] & sx ? 2 : 0);\r\n        }\r\n    }\r\n    updateOAM(address, value) {\r\n    }\r\n    load(file) {\r\n        const reader = new FileReader();\r\n        return new Promise((resolve, reject) => {\r\n            reader.addEventListener('load', () => resolve(reader));\r\n            reader.addEventListener('error', () => reject(reader.error));\r\n            reader.addEventListener('abort', () => reject(null));\r\n            reader.readAsArrayBuffer(file);\r\n        });\r\n    }\r\n    step() {\r\n        this.modeClock += this.hardware.cpu.registers.t;\r\n        switch (this.mode) {\r\n            case RenderingMode.OAM_READ:\r\n                if (this.modeClock >= 80) {\r\n                    this.modeClock = 0;\r\n                    this.mode = RenderingMode.VRAM_READ;\r\n                }\r\n                break;\r\n            case RenderingMode.VRAM_READ:\r\n                if (this.modeClock >= 172) {\r\n                    this.modeClock = 0;\r\n                    this.mode = RenderingMode.HBLANK;\r\n                    this.render();\r\n                }\r\n                break;\r\n            case RenderingMode.HBLANK:\r\n                if (this.modeClock >= 204) {\r\n                    this.modeClock = 0;\r\n                    if (++this.line === 143) {\r\n                        this.mode = RenderingMode.VBLANK;\r\n                        this.context.putImageData(this.screen, 0, 0);\r\n                    }\r\n                    else\r\n                        this.mode = RenderingMode.OAM_READ;\r\n                }\r\n                break;\r\n            case RenderingMode.VBLANK:\r\n                if (this.modeClock >= 456) {\r\n                    this.modeClock = 0;\r\n                    if (++this.line > 153) {\r\n                        this.mode = RenderingMode.OAM_READ;\r\n                        this.line = 0;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    reset() {\r\n        this.palette.reset();\r\n        this.vram = new Int16Array(1 << 13); // 8k\r\n        this.oam = new Int16Array(160);\r\n        this.context = this.canvas.getContext('2d');\r\n        this.screen = this.context.createImageData(160, 144);\r\n        this.context.putImageData(this.screen, 0, 0);\r\n        this.tileset = [];\r\n        for (let i = 0; i < 384; i++) {\r\n            this.tileset.push([]);\r\n            for (let j = 0; j < 8; j++)\r\n                this.tileset[i].push((new Array(8).fill(0)));\r\n        }\r\n    }\r\n    setHardwareBus(hardware) {\r\n        this.hardware = hardware;\r\n    }\r\n    render() {\r\n        let mapOffset = this.bgMap ? 0x1C00 : 0x1800;\r\n        mapOffset += ((this.line + this.scrollY) & 255) >> 3;\r\n        let lineOffset = this.scrollX >> 3;\r\n        let y = (this.line + this.scrollY) & 7;\r\n        let x = this.scrollX & 7;\r\n        let canvasOffset = this.line * 160 * 4;\r\n        let tile = this.vram[mapOffset + lineOffset];\r\n        if (this.bgTile === 1 && tile < 128)\r\n            tile += 256;\r\n        for (let i = 0; i < 160; i++) {\r\n            let color = this.palette.get(this.tileset[tile][y][x]);\r\n            this.screen.data[canvasOffset++] = color.r;\r\n            this.screen.data[canvasOffset++] = color.g;\r\n            this.screen.data[canvasOffset++] = color.b;\r\n            this.screen.data[canvasOffset++] = color.a;\r\n            if (++x === 8) {\r\n                x = 0;\r\n                lineOffset = (lineOffset + 1) & 31;\r\n                tile = this.vram[mapOffset + lineOffset];\r\n                if (this.bgTile === 1 && tile < 128)\r\n                    tile += 256;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/GPU/index.ts?");

/***/ }),

/***/ "./src/Emulator/Hardware.ts":
/*!**********************************!*\
  !*** ./src/Emulator/Hardware.ts ***!
  \**********************************/
/*! exports provided: HardwareBus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HardwareBus\", function() { return HardwareBus; });\nclass HardwareBus {\r\n    constructor(cpu, memory, gpu) {\r\n        this.cpu = cpu;\r\n        this.memory = memory;\r\n        this.gpu = gpu;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/Hardware.ts?");

/***/ }),

/***/ "./src/Emulator/Memory/Bios.ts":
/*!*************************************!*\
  !*** ./src/Emulator/Memory/Bios.ts ***!
  \*************************************/
/*! exports provided: bios */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bios\", function() { return bios; });\nconst bios = [\r\n    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,\r\n    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,\r\n    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,\r\n    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,\r\n    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,\r\n    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,\r\n    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,\r\n    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,\r\n    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,\r\n    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,\r\n    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,\r\n    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,\r\n    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,\r\n    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,\r\n    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,\r\n    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50,\r\n];\r\n\n\n//# sourceURL=webpack:///./src/Emulator/Memory/Bios.ts?");

/***/ }),

/***/ "./src/Emulator/Memory/index.ts":
/*!**************************************!*\
  !*** ./src/Emulator/Memory/index.ts ***!
  \**************************************/
/*! exports provided: Memory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Memory\", function() { return Memory; });\n/* harmony import */ var _Bios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bios */ \"./src/Emulator/Memory/Bios.ts\");\n\r\nclass Memory {\r\n    constructor() {\r\n        this.inBios = true;\r\n        this.hardware = null;\r\n        this.bios = _Bios__WEBPACK_IMPORTED_MODULE_0__[\"bios\"];\r\n        this.reset();\r\n    }\r\n    readByte(address) {\r\n        const masked = address & 0xF000;\r\n        if (masked === 0x0000) { // BIOS / High ROM0\r\n            if (this.inBios) {\r\n                if (address < 0x0100)\r\n                    return this.bios[address];\r\n                else if (this.hardware.cpu.registers.programCount === 0x0100)\r\n                    this.inBios = false;\r\n            }\r\n            return this.rom[address];\r\n        }\r\n        else if (masked <= 0x7000) // ROM0 / ROM1 (unbanked)\r\n            return this.rom[address];\r\n        else if (masked <= 0x9000) // Video RAM\r\n            return this.hardware.gpu.vram[address & 0x1FFF];\r\n        else if (masked <= 0xB000) // External RAM\r\n            return this.eram[address & 0x1FFF];\r\n        else if (masked <= 0xFD00) // Working RAM and WRAM shadow\r\n            return this.wram[address & 0x1FFF];\r\n        else {\r\n            const lowMasked = address & 0x0F00;\r\n            if (lowMasked === 0xE00) { // Graphics object attribute memory (OAM)\r\n                if (address < 0xFEA0)\r\n                    return this.hardware.gpu.oam[address & 0xFF];\r\n                else\r\n                    return 0;\r\n            }\r\n            else if (lowMasked === 0xF00) { // Zero-page RAM\r\n                if (address >= 0xFF80)\r\n                    return this.zram[address & 0x7F];\r\n                else\r\n                    return 0;\r\n            }\r\n        }\r\n    }\r\n    readWord(address) {\r\n        return this.readByte(address) + (this.readByte(address + 1) << 8);\r\n    }\r\n    writeByte(address, value) {\r\n        const masked = address & 0xF000;\r\n        if (masked <= 0x7000) // ROM is not writable\r\n            return;\r\n        else if (masked <= 0x9000) { // Video RAM\r\n            const mapped = address & 0x1FFF;\r\n            this.hardware.gpu.vram[mapped] = value;\r\n            this.hardware.gpu.updateTile(mapped, value); // TODO this may need to be the full address, not the mapped one\r\n        }\r\n        else if (masked <= 0xB000) // External RAM\r\n            this.eram[address & 0x1FFF] = value;\r\n        else if (masked <= 0xFD000) // Working RAM / WRAM shadow\r\n            this.wram[address & 0x1FFF] = value;\r\n        else {\r\n            const lowMasked = address & 0x0F00;\r\n            if (lowMasked === 0xE00) {\r\n                const mapped = address & 0xFF;\r\n                if (mapped < 0xA0)\r\n                    return;\r\n                this.hardware.gpu.updateOAM(mapped, value);\r\n            }\r\n            else if (lowMasked === 0xF00 && address >= 0xFF80)\r\n                this.zram[address & 0x7F] = value;\r\n        }\r\n    }\r\n    writeWord(address, value) {\r\n        this.writeByte(address, value & 255);\r\n        this.writeByte(address + 1, value >> 8);\r\n    }\r\n    setHardwareBus(hardware) {\r\n        this.hardware = hardware;\r\n    }\r\n    load(file) {\r\n        const reader = new FileReader();\r\n        return new Promise((resolve, reject) => {\r\n            reader.addEventListener('load', () => {\r\n                this.rom = reader.result.split('').map((char) => char.charCodeAt(0));\r\n                resolve(reader);\r\n            });\r\n            reader.addEventListener('error', () => reject(reader.error));\r\n            reader.addEventListener('abort', () => reject(null));\r\n            reader.readAsBinaryString(file);\r\n        });\r\n    }\r\n    reset() {\r\n        this.inBios = true;\r\n        this.rom = (new Array(1 << 15)).fill(0); // 32k\r\n        this.eram = (new Array(1 << 13)).fill(0); // 8k\r\n        this.wram = (new Array(1 << 13)).fill(0); // 8k\r\n        this.zram = (new Array(128)).fill(0); // 128b\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/Emulator/Memory/index.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Emulator_CPU_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Emulator/CPU/index */ \"./src/Emulator/CPU/index.ts\");\n/* harmony import */ var _Emulator_GPU_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Emulator/GPU/index */ \"./src/Emulator/GPU/index.ts\");\n/* harmony import */ var _Emulator_Hardware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Emulator/Hardware */ \"./src/Emulator/Hardware.ts\");\n/* harmony import */ var _Emulator_Memory_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Emulator/Memory/index */ \"./src/Emulator/Memory/index.ts\");\n\r\n\r\n\r\n\r\nconst cpu = new _Emulator_CPU_index__WEBPACK_IMPORTED_MODULE_0__[\"Cpu\"]();\r\nconst memory = new _Emulator_Memory_index__WEBPACK_IMPORTED_MODULE_3__[\"Memory\"]();\r\nconst gpu = new _Emulator_GPU_index__WEBPACK_IMPORTED_MODULE_1__[\"Gpu\"](document.getElementById('screen'));\r\nconst hardware = new _Emulator_Hardware__WEBPACK_IMPORTED_MODULE_2__[\"HardwareBus\"](cpu, memory, gpu);\r\ncpu.setHardwareBus(hardware);\r\nmemory.setHardwareBus(hardware);\r\ngpu.setHardwareBus(hardware);\r\nconst romLoader = document.getElementById('rom-loader');\r\nromLoader.addEventListener('change', () => {\r\n    gpu.reset();\r\n    memory.reset();\r\n    cpu.reset();\r\n    cpu.halt = true;\r\n    if (!romLoader.files.length)\r\n        return;\r\n    memory.load(romLoader.files[0]).then(() => cpu.exec());\r\n});\r\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ });