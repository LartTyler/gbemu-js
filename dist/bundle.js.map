{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Emulator/CPU/Clock.ts","webpack:///./src/Emulator/CPU/Operations/Add.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/Extra.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/Reset.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/RotateLeft.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/RotateRight.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/Set.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/ShiftLeft.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/ShiftRight.ts","webpack:///./src/Emulator/CPU/Operations/BitManipulation/Test.ts","webpack:///./src/Emulator/CPU/Operations/Bitwise.ts","webpack:///./src/Emulator/CPU/Operations/Bitwise/And.ts","webpack:///./src/Emulator/CPU/Operations/Bitwise/Or.ts","webpack:///./src/Emulator/CPU/Operations/Bitwise/Xor.ts","webpack:///./src/Emulator/CPU/Operations/Compare.ts","webpack:///./src/Emulator/CPU/Operations/Decrement.ts","webpack:///./src/Emulator/CPU/Operations/Extra.ts","webpack:///./src/Emulator/CPU/Operations/Increment.ts","webpack:///./src/Emulator/CPU/Operations/Interrupt.ts","webpack:///./src/Emulator/CPU/Operations/Jump.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore/MemoryToMemory.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore/MemoryToRegister.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore/ProgramCount.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore/RegisterToMemory.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore/RegisterToRegister.ts","webpack:///./src/Emulator/CPU/Operations/LoadStore/Swap.ts","webpack:///./src/Emulator/CPU/Operations/Return.ts","webpack:///./src/Emulator/CPU/Operations/Stack.ts","webpack:///./src/Emulator/CPU/Operations/Subtract.ts","webpack:///./src/Emulator/CPU/Operations/index.ts","webpack:///./src/Emulator/CPU/Operations/mappings.ts","webpack:///./src/Emulator/CPU/Registers.ts","webpack:///./src/Emulator/CPU/index.ts","webpack:///./src/Emulator/GPU/Color.ts","webpack:///./src/Emulator/GPU/index.ts","webpack:///./src/Emulator/Hardware.ts","webpack:///./src/Emulator/Memory/Bios.ts","webpack:///./src/Emulator/Memory/index.ts","webpack:///./src/Monitor.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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C7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;IAC7F,SAAS,EAA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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","/**\n * @see https://en.wikipedia.org/wiki/Zilog_Z80#Instruction_execution\n */\nexport interface ClockInterface {\n\t/**\n\t * Machine cycles (also referred to as M-cycles)\n\t */\n\tm: number;\n\n\t/**\n\t * Clock periods (also referred to as T-cycles)\n\t */\n\tt: number;\n\n\treset(): void;\n}\n\nexport class Clock implements ClockInterface {\n\tpublic t: number = 0;\n\n\tprivate _m: number = 0;\n\n\tget m() {\n\t\treturn this._m;\n\t}\n\n\tset m(value: number) {\n\t\tthis._m = value;\n\t\tthis.t = value * 4;\n\t}\n\n\tpublic reset(): void {\n\t\tthis.m = 0;\n\t}\n}","import {MemoryInterface} from '../../Memory/index';\nimport {RegisterFlag, RegisterKey, RegisterSetInterface} from '../Registers';\nimport {OperatorCallback, OperatorSet} from './index';\n\nconst registerAdd = (value: number, registers: RegisterSetInterface) => {\n\tregisters.a += value;\n\tregisters.flags = 0;\n\n\tif (!(registers.a & 255))\n\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\tif (registers.a > 255)\n\t\tregisters.flags |= RegisterFlag.CARRY;\n\n\tregisters.a &= 255;\n\tregisters.m = 1;\n};\n\nconst registerAdd16 = (value: number, registers: RegisterSetInterface) => {\n\tvalue += (registers.h << 8) + registers.l;\n\n\tif (value > 65535)\n\t\tregisters.flags |= RegisterFlag.CARRY;\n\telse\n\t\tregisters.flags &= 0xEF;\n\n\tregisters.h = (value >> 8) & 255;\n\tregisters.l = value & 255;\n\n\tregisters.m = 3;\n};\n\nconst registerAdd16FromAddress = (sourceHigh: RegisterKey, sourceLow: RegisterKey, registers: RegisterSetInterface) => {\n\tregisterAdd16((registers[sourceHigh] << 8) + registers[sourceLow], registers);\n};\n\nconst addFromAddress = (address: number, memory: MemoryInterface, registers: RegisterSetInterface) => {\n\tconst a = registers.a;\n\tconst m = memory.readByte(address);\n\n\tregisters.a += m;\n\tregisters.flags = registers.a > 255 ? RegisterFlag.CARRY : 0;\n\n\tregisters.a &= 255;\n\n\tif (!registers.a)\n\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\tif ((registers.a ^ a ^ m) & 0x10)\n\t\tregisters.flags |= RegisterFlag.HALF_CARRY;\n\n\tregisters.m = 2;\n};\n\nconst addWithCarry = (value: number, registers: RegisterSetInterface) => {\n\tconst a = registers.a;\n\n\tregisters.a += value;\n\tregisters.a += registers.flags & RegisterFlag.CARRY ? 1 : 0;\n\n\tregisters.flags = (registers.a > 255) ? RegisterFlag.CARRY : 0;\n\n\tregisters.a &= 255;\n\n\tif (registers.a)\n\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\tif ((registers.a ^ value ^ a) & 0x10)\n\t\tregisters.flags |= RegisterFlag.HALF_CARRY;\n\n\tregisters.m = 1;\n};\n\nconst addFromAddressWithCarry = (address: number, memory: MemoryInterface, registers: RegisterSetInterface) => {\n\tconst a = registers.a;\n\tconst m = memory.readByte(address);\n\n\tregisters.a += m;\n\tregisters.a += registers.flags & RegisterFlag.CARRY ? 1 : 0;\n\n\tregisters.flags = registers.a > 255 ? RegisterFlag.CARRY : 0;\n\n\tregisters.a &= 255;\n\n\tif (!registers.a)\n\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\tif ((registers.a ^ m ^ a) & 0x10)\n\t\tregisters.flags |= RegisterFlag.HALF_CARRY;\n\n\tregisters.m = 2;\n};\n\nexport interface AddOperatorSet extends OperatorSet {\n\tAddA: OperatorCallback;\n\tAddB: OperatorCallback;\n\tAddC: OperatorCallback;\n\tAddD: OperatorCallback;\n\tAddE: OperatorCallback;\n\tAddH: OperatorCallback;\n\tAddL: OperatorCallback;\n\n\tAddHLAddress: OperatorCallback;\n\tAddPCAddress: OperatorCallback;\n\n\tAddBCToHL: OperatorCallback;\n\tAddDEToHL: OperatorCallback;\n\tAddHLToHL: OperatorCallback;\n\tAddSPToHL: OperatorCallback;\n\n\tAddPCAddressToSP: OperatorCallback;\n\n\tAddAWithCarry: OperatorCallback;\n\tAddBWithCarry: OperatorCallback;\n\tAddCWithCarry: OperatorCallback;\n\tAddDWithCarry: OperatorCallback;\n\tAddEWithCarry: OperatorCallback;\n\tAddHWithCarry: OperatorCallback;\n\tAddLWithCarry: OperatorCallback;\n\n\tAddHLAddressWithCarry: OperatorCallback;\n\tAddPCAddressWithCarry: OperatorCallback;\n}\n\nexport const AddOperators: AddOperatorSet = {\n\tAddA: hardware => registerAdd(hardware.cpu.registers.a, hardware.cpu.registers),\n\tAddB: hardware => registerAdd(hardware.cpu.registers.b, hardware.cpu.registers),\n\tAddC: hardware => registerAdd(hardware.cpu.registers.c, hardware.cpu.registers),\n\tAddD: hardware => registerAdd(hardware.cpu.registers.d, hardware.cpu.registers),\n\tAddE: hardware => registerAdd(hardware.cpu.registers.e, hardware.cpu.registers),\n\tAddH: hardware => registerAdd(hardware.cpu.registers.h, hardware.cpu.registers),\n\tAddL: hardware => registerAdd(hardware.cpu.registers.l, hardware.cpu.registers),\n\n\tAddPCAddress: hardware => addFromAddress(hardware.cpu.registers.programCount, hardware.memory, hardware.cpu.registers),\n\tAddHLAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\taddFromAddress((registers.h << 8) + registers.l, hardware.memory, registers);\n\t},\n\n\tAddBCToHL: hardware => registerAdd16FromAddress('b', 'c', hardware.cpu.registers),\n\tAddDEToHL: hardware => registerAdd16FromAddress('d', 'e', hardware.cpu.registers),\n\tAddHLToHL: hardware => registerAdd16FromAddress('h', 'l', hardware.cpu.registers),\n\tAddSPToHL: hardware => registerAdd16(hardware.cpu.registers.stackPointer, hardware.cpu.registers),\n\n\tAddPCAddressToSP: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tlet i = memory.readByte(registers.programCount++);\n\n\t\tif (i > 127)\n\t\t\ti = -((~i + 1) & 255);\n\n\t\tregisters.stackPointer += i;\n\n\t\tregisters.m = 4;\n\t},\n\n\tAddAWithCarry: hardware => addWithCarry(hardware.cpu.registers.a, hardware.cpu.registers),\n\tAddBWithCarry: hardware => addWithCarry(hardware.cpu.registers.b, hardware.cpu.registers),\n\tAddCWithCarry: hardware => addWithCarry(hardware.cpu.registers.c, hardware.cpu.registers),\n\tAddDWithCarry: hardware => addWithCarry(hardware.cpu.registers.d, hardware.cpu.registers),\n\tAddEWithCarry: hardware => addWithCarry(hardware.cpu.registers.e, hardware.cpu.registers),\n\tAddHWithCarry: hardware => addWithCarry(hardware.cpu.registers.h, hardware.cpu.registers),\n\tAddLWithCarry: hardware => addWithCarry(hardware.cpu.registers.l, hardware.cpu.registers),\n\n\tAddPCAddressWithCarry: hardware => addFromAddressWithCarry(hardware.cpu.registers.programCount, hardware.memory, hardware.cpu.registers),\n\tAddHLAddressWithCarry: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\taddFromAddressWithCarry((registers.h << 8) + registers.l, hardware.memory, registers);\n\t},\n};","import {ExtraBitManipOperatorSet, ExtraBitManipOperatos} from './BitManipulation/Extra';\nimport {ResetOperators, ResetOperatorSet} from './BitManipulation/Reset';\nimport {RotateLeftOperators, RotateLeftOperatorSet} from './BitManipulation/RotateLeft';\nimport {RotateRightOperators, RotateRightOperatorSet} from './BitManipulation/RotateRight';\nimport {SetOperators, SetOperatorSet} from './BitManipulation/Set';\nimport {ShiftLeftOperators, ShiftLeftOperatorSet} from './BitManipulation/ShiftLeft';\nimport {ShiftRightOperators, ShiftRightOperatorSet} from './BitManipulation/ShiftRight';\nimport {TestOperators, TestOperatorSet} from './BitManipulation/Test';\nimport {OperatorSet} from './index';\n\nexport interface BitManipulationOperatorSet extends OperatorSet,\n\tExtraBitManipOperatorSet,\n\tResetOperatorSet,\n\tRotateLeftOperatorSet,\n\tRotateRightOperatorSet,\n\tSetOperatorSet,\n\tShiftLeftOperatorSet,\n\tShiftRightOperatorSet,\n\tTestOperatorSet {\n}\n\nexport const BitManipulationOperators: BitManipulationOperatorSet = {\n\t...ExtraBitManipOperatos,\n\t...ResetOperators,\n\t...RotateLeftOperators,\n\t...RotateRightOperators,\n\t...TestOperators,\n\t...SetOperators,\n\t...ShiftLeftOperators,\n\t...ShiftRightOperators,\n};","import {RegisterFlag} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nexport interface ExtraBitManipOperatorSet extends OperatorSet {\n\tInvertA: OperatorCallback;\n\tNegateA: OperatorCallback;\n\n\tInvertCarryFlag: OperatorCallback;\n\tSetCarryFlag: OperatorCallback;\n}\n\nexport const ExtraBitManipOperatos: ExtraBitManipOperatorSet = {\n\tInvertA: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a ^= 255;\n\t\tregisters.flags = registers.a ? 0 : RegisterFlag.ZERO;\n\n\t\tregisters.m = 1;\n\t},\n\tNegateA: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a = -registers.a;\n\n\t\tregisters.flags = registers.a < 0 ? RegisterFlag.CARRY : 0;\n\n\t\tregisters.a &= 255;\n\n\t\tif (!registers.a)\n\t\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\t\tregisters.m = 2;\n\t},\n\tInvertCarryFlag: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tconst ci = registers.flags & RegisterFlag.CARRY ? 0 : 0x10;\n\n\t\tregisters.flags = (registers.flags & 0xEF) + ci;\n\n\t\tregisters.m = 1;\n\t},\n\tSetCarryFlag: hardware => {\n\t\thardware.cpu.registers.flags |= RegisterFlag.CARRY;\n\t\thardware.cpu.registers.m = 1;\n\t},\n};","import {HardwareBusInterface} from '../../../Hardware';\r\nimport {RegisterKey, RegisterSetInterface} from '../../Registers';\r\nimport {OperatorCallback, OperatorSet} from '../index';\r\n\r\nconst reset = (name: RegisterKey, mask: number, registers: RegisterSetInterface) => {\r\n\tregisters[name] &= mask;\r\n\r\n\tregisters.m = 2;\r\n};\r\n\r\nconst resetAddress = (mask: number, hardware: HardwareBusInterface) => {\r\n\tconst memory = hardware.memory;\r\n\tconst registers = hardware.cpu.registers;\r\n\r\n\tconst address = (registers.h << 8) + registers.l;\r\n\r\n\tmemory.writeByte(address, memory.readByte(address) & mask);\r\n\r\n\tregisters.m = 4;\r\n};\r\n\r\nexport interface ResetOperatorSet extends OperatorSet {\r\n\tResetABit0: OperatorCallback;\r\n\tResetABit1: OperatorCallback;\r\n\tResetABit2: OperatorCallback;\r\n\tResetABit3: OperatorCallback;\r\n\tResetABit4: OperatorCallback;\r\n\tResetABit5: OperatorCallback;\r\n\tResetABit6: OperatorCallback;\r\n\tResetABit7: OperatorCallback;\r\n\tResetBBit0: OperatorCallback;\r\n\tResetBBit1: OperatorCallback;\r\n\tResetBBit2: OperatorCallback;\r\n\tResetBBit3: OperatorCallback;\r\n\tResetBBit4: OperatorCallback;\r\n\tResetBBit5: OperatorCallback;\r\n\tResetBBit6: OperatorCallback;\r\n\tResetBBit7: OperatorCallback;\r\n\tResetCBit0: OperatorCallback;\r\n\tResetCBit1: OperatorCallback;\r\n\tResetCBit2: OperatorCallback;\r\n\tResetCBit3: OperatorCallback;\r\n\tResetCBit4: OperatorCallback;\r\n\tResetCBit5: OperatorCallback;\r\n\tResetCBit6: OperatorCallback;\r\n\tResetCBit7: OperatorCallback;\r\n\tResetDBit0: OperatorCallback;\r\n\tResetDBit1: OperatorCallback;\r\n\tResetDBit2: OperatorCallback;\r\n\tResetDBit3: OperatorCallback;\r\n\tResetDBit4: OperatorCallback;\r\n\tResetDBit5: OperatorCallback;\r\n\tResetDBit6: OperatorCallback;\r\n\tResetDBit7: OperatorCallback;\r\n\tResetEBit0: OperatorCallback;\r\n\tResetEBit1: OperatorCallback;\r\n\tResetEBit2: OperatorCallback;\r\n\tResetEBit3: OperatorCallback;\r\n\tResetEBit4: OperatorCallback;\r\n\tResetEBit5: OperatorCallback;\r\n\tResetEBit6: OperatorCallback;\r\n\tResetEBit7: OperatorCallback;\r\n\tResetHBit0: OperatorCallback;\r\n\tResetHBit1: OperatorCallback;\r\n\tResetHBit2: OperatorCallback;\r\n\tResetHBit3: OperatorCallback;\r\n\tResetHBit4: OperatorCallback;\r\n\tResetHBit5: OperatorCallback;\r\n\tResetHBit6: OperatorCallback;\r\n\tResetHBit7: OperatorCallback;\r\n\tResetLBit0: OperatorCallback;\r\n\tResetLBit1: OperatorCallback;\r\n\tResetLBit2: OperatorCallback;\r\n\tResetLBit3: OperatorCallback;\r\n\tResetLBit4: OperatorCallback;\r\n\tResetLBit5: OperatorCallback;\r\n\tResetLBit6: OperatorCallback;\r\n\tResetLBit7: OperatorCallback;\r\n\tResetHLAddressBit0: OperatorCallback;\r\n\tResetHLAddressBit1: OperatorCallback;\r\n\tResetHLAddressBit2: OperatorCallback;\r\n\tResetHLAddressBit3: OperatorCallback;\r\n\tResetHLAddressBit4: OperatorCallback;\r\n\tResetHLAddressBit5: OperatorCallback;\r\n\tResetHLAddressBit6: OperatorCallback;\r\n\tResetHLAddressBit7: OperatorCallback;\r\n}\r\n\r\nconst operators: Partial<ResetOperatorSet> = {};\r\n\r\n['a', 'b', 'c', 'd', 'e', 'h', 'l', 'm'].forEach((name: string) => {\r\n\tlet mask = 0xFE;\r\n\r\n\tfor (let i = 0; i <= 7; i++) {\r\n\t\tlet key;\r\n\t\tlet callable;\r\n\r\n\t\tif (name === 'm') {\r\n\t\t\tkey = `ResetHLAddressBit${i}`;\r\n\t\t\tcallable = (hardware: HardwareBusInterface) => resetAddress(mask, hardware);\r\n\t\t} else {\r\n\t\t\tkey = `Reset${name.toUpperCase()}Bit${i}`;\r\n\t\t\tcallable = (hardware: HardwareBusInterface) => reset(<RegisterKey>name, mask, hardware.cpu.registers);\r\n\t\t}\r\n\r\n\t\toperators[key] = callable;\r\n\r\n\t\tif (i === 0)\r\n\t\t\tmask -= 1;\r\n\t\telse\r\n\t\t\tmask -= Math.pow(2, i);\r\n\t}\r\n});\r\n\r\nexport const ResetOperators: ResetOperatorSet = <ResetOperatorSet>operators;","import {HardwareBusInterface} from '../../../Hardware';\r\nimport {RegisterKey, RegisterSetInterface} from '../../Registers';\r\nimport {OperatorCallback, OperatorSet} from '../index';\r\n\r\nconst rotateLeft = (name: RegisterKey, carry: boolean, registers: RegisterSetInterface) => {\r\n\tconst flagMask = carry ? 0x80 : 0x10;\r\n\r\n\tconst ci = registers.flags & flagMask ? 1 : 0;\r\n\tconst co = registers[name] & 0x80 ? 0x10 : 0;\r\n\r\n\tregisters[name] = ((registers[name] << 1) + ci) & 255;\r\n\tregisters.flags = (registers.flags & 0xEF) + co;\r\n\r\n\tregisters.m = name === 'a' ? 1 : 2;\r\n};\r\n\r\nconst rotateLeftAddress = (carry: boolean, hardware: HardwareBusInterface) => {\r\n\tconst memory = hardware.memory;\r\n\tconst registers = hardware.cpu.registers;\r\n\r\n\tconst flagMask = carry ? 0x80 : 0x10;\r\n\tconst address = (registers.h << 8) + registers.l;\r\n\r\n\tlet i = memory.readByte(address);\r\n\r\n\tconst ci = registers.flags & flagMask ? 1 : 0;\r\n\tconst co = i & 0x80 ? 0x10 : 0;\r\n\r\n\ti = ((i << 1) + ci) & 255;\r\n\r\n\tregisters.flags = i ? 0 : 0x80;\r\n\r\n\tmemory.writeByte(address, i);\r\n\r\n\tregisters.flags = (registers.flags & 0xEF) + co;\r\n\r\n\tregisters.m = 4;\r\n};\r\n\r\nexport interface RotateLeftOperatorSet extends OperatorSet {\r\n\tRotateLeftA: OperatorCallback;\r\n\tRotateLeftB: OperatorCallback;\r\n\tRotateLeftC: OperatorCallback;\r\n\tRotateLeftD: OperatorCallback;\r\n\tRotateLeftE: OperatorCallback;\r\n\tRotateLeftH: OperatorCallback;\r\n\tRotateLeftL: OperatorCallback;\r\n\tRotateLeftHLAddress: OperatorCallback;\r\n\r\n\tRotateLeftAWithCarry: OperatorCallback;\r\n\tRotateLeftBWithCarry: OperatorCallback;\r\n\tRotateLeftCWithCarry: OperatorCallback;\r\n\tRotateLeftDWithCarry: OperatorCallback;\r\n\tRotateLeftEWithCarry: OperatorCallback;\r\n\tRotateLeftHWithCarry: OperatorCallback;\r\n\tRotateLeftLWithCarry: OperatorCallback;\r\n\tRotateLeftHLAddressWithCarry: OperatorCallback;\r\n}\r\n\r\nexport const RotateLeftOperators: RotateLeftOperatorSet = {\r\n\tRotateLeftA: hardware => rotateLeft('a', false, hardware.cpu.registers),\r\n\tRotateLeftB: hardware => rotateLeft('b', false, hardware.cpu.registers),\r\n\tRotateLeftC: hardware => rotateLeft('c', false, hardware.cpu.registers),\r\n\tRotateLeftD: hardware => rotateLeft('d', false, hardware.cpu.registers),\r\n\tRotateLeftE: hardware => rotateLeft('e', false, hardware.cpu.registers),\r\n\tRotateLeftH: hardware => rotateLeft('h', false, hardware.cpu.registers),\r\n\tRotateLeftL: hardware => rotateLeft('l', false, hardware.cpu.registers),\r\n\tRotateLeftHLAddress: hardware => rotateLeftAddress(false, hardware),\r\n\r\n\tRotateLeftAWithCarry: hardware => rotateLeft('a', true, hardware.cpu.registers),\r\n\tRotateLeftBWithCarry: hardware => rotateLeft('b', true, hardware.cpu.registers),\r\n\tRotateLeftCWithCarry: hardware => rotateLeft('c', true, hardware.cpu.registers),\r\n\tRotateLeftDWithCarry: hardware => rotateLeft('d', true, hardware.cpu.registers),\r\n\tRotateLeftEWithCarry: hardware => rotateLeft('e', true, hardware.cpu.registers),\r\n\tRotateLeftHWithCarry: hardware => rotateLeft('h', true, hardware.cpu.registers),\r\n\tRotateLeftLWithCarry: hardware => rotateLeft('l', true, hardware.cpu.registers),\r\n\tRotateLeftHLAddressWithCarry: hardware => rotateLeftAddress(true, hardware),\r\n};","import {HardwareBusInterface} from '../../../Hardware';\r\nimport {RegisterKey, RegisterSetInterface} from '../../Registers';\r\nimport {OperatorCallback, OperatorSet} from '../index';\r\n\r\nconst rotateRight = (name: RegisterKey, carry: boolean, registers: RegisterSetInterface) => {\r\n\tconst flagMask = carry ? 1 : 0x10;\r\n\r\n\tconst ci = registers.flags & flagMask ? 0x80 : 0;\r\n\tconst co = registers[name] & 1 ? 0x10 : 0;\r\n\r\n\tregisters[name] = ((registers[name] >> 1) + ci) & 255;\r\n\r\n\tregisters.flags = (registers.flags & 0xEF) + co;\r\n\r\n\tregisters.m = name === 'a' ? 1 : 2;\r\n};\r\n\r\nconst rotateRightAddress = (carry: boolean, hardware: HardwareBusInterface) => {\r\n\tconst memory = hardware.memory;\r\n\tconst registers = hardware.cpu.registers;\r\n\r\n\tconst flagMask = carry ? 1 : 0x10;\r\n\tconst address = (registers.h << 8) + registers.l;\r\n\r\n\tlet i = memory.readByte(address);\r\n\r\n\tconst ci = registers.flags & flagMask ? 0x80 : 0;\r\n\tconst co = i & 1 ? 0x10 : 0;\r\n\r\n\ti = ((i >> 1) + ci) & 255;\r\n\r\n\tmemory.writeByte(address, i);\r\n\r\n\tregisters.flags = i ? 0 : 0x80;\r\n\tregisters.flags = (registers.flags & 0xEF) + co;\r\n\r\n\tregisters.m = 4;\r\n};\r\n\r\nexport interface RotateRightOperatorSet extends OperatorSet {\r\n\tRotateRightA: OperatorCallback;\r\n\tRotateRightB: OperatorCallback;\r\n\tRotateRightC: OperatorCallback;\r\n\tRotateRightD: OperatorCallback;\r\n\tRotateRightE: OperatorCallback;\r\n\tRotateRightH: OperatorCallback;\r\n\tRotateRightL: OperatorCallback;\r\n\tRotateRightHLAddress: OperatorCallback;\r\n\r\n\tRotateRightAWithCarry: OperatorCallback;\r\n\tRotateRightBWithCarry: OperatorCallback;\r\n\tRotateRightCWithCarry: OperatorCallback;\r\n\tRotateRightDWithCarry: OperatorCallback;\r\n\tRotateRightEWithCarry: OperatorCallback;\r\n\tRotateRightHWithCarry: OperatorCallback;\r\n\tRotateRightLWithCarry: OperatorCallback;\r\n\tRotateRightHLAddressWithCarry: OperatorCallback;\r\n}\r\n\r\nexport const RotateRightOperators: RotateRightOperatorSet = {\r\n\tRotateRightA: hardware => rotateRight('a', false, hardware.cpu.registers),\r\n\tRotateRightB: hardware => rotateRight('b', false, hardware.cpu.registers),\r\n\tRotateRightC: hardware => rotateRight('c', false, hardware.cpu.registers),\r\n\tRotateRightD: hardware => rotateRight('d', false, hardware.cpu.registers),\r\n\tRotateRightE: hardware => rotateRight('e', false, hardware.cpu.registers),\r\n\tRotateRightH: hardware => rotateRight('h', false, hardware.cpu.registers),\r\n\tRotateRightL: hardware => rotateRight('l', false, hardware.cpu.registers),\r\n\tRotateRightHLAddress: hardware => rotateRightAddress(false, hardware),\r\n\r\n\tRotateRightAWithCarry: hardware => rotateRight('a', true, hardware.cpu.registers),\r\n\tRotateRightBWithCarry: hardware => rotateRight('b', true, hardware.cpu.registers),\r\n\tRotateRightCWithCarry: hardware => rotateRight('c', true, hardware.cpu.registers),\r\n\tRotateRightDWithCarry: hardware => rotateRight('d', true, hardware.cpu.registers),\r\n\tRotateRightEWithCarry: hardware => rotateRight('e', true, hardware.cpu.registers),\r\n\tRotateRightHWithCarry: hardware => rotateRight('h', true, hardware.cpu.registers),\r\n\tRotateRightLWithCarry: hardware => rotateRight('l', true, hardware.cpu.registers),\r\n\tRotateRightHLAddressWithCarry: hardware => rotateRightAddress(true, hardware),\r\n};","import {HardwareBusInterface} from '../../../Hardware';\r\nimport {RegisterKey, RegisterSetInterface} from '../../Registers';\r\nimport {OperatorCallback, OperatorSet} from '../index';\r\n\r\nconst set = (name: RegisterKey, mask: number, registers: RegisterSetInterface) => {\r\n\tregisters[name] = registers[name] & mask;\r\n\r\n\tregisters.m = 2;\r\n};\r\n\r\nconst setAddress = (mask: number, hardware: HardwareBusInterface) => {\r\n\tconst memory = hardware.memory;\r\n\tconst registers = hardware.cpu.registers;\r\n\r\n\tconst address = (registers.h << 8) + registers.l;\r\n\r\n\tmemory.writeByte(address, memory.readByte(address) & mask);\r\n\r\n\tregisters.m = 4;\r\n};\r\n\r\nexport interface SetOperatorSet extends OperatorSet {\r\n\tSetABit0: OperatorCallback;\r\n\tSetABit1: OperatorCallback;\r\n\tSetABit2: OperatorCallback;\r\n\tSetABit3: OperatorCallback;\r\n\tSetABit4: OperatorCallback;\r\n\tSetABit5: OperatorCallback;\r\n\tSetABit6: OperatorCallback;\r\n\tSetABit7: OperatorCallback;\r\n\tSetBBit0: OperatorCallback;\r\n\tSetBBit1: OperatorCallback;\r\n\tSetBBit2: OperatorCallback;\r\n\tSetBBit3: OperatorCallback;\r\n\tSetBBit4: OperatorCallback;\r\n\tSetBBit5: OperatorCallback;\r\n\tSetBBit6: OperatorCallback;\r\n\tSetBBit7: OperatorCallback;\r\n\tSetCBit0: OperatorCallback;\r\n\tSetCBit1: OperatorCallback;\r\n\tSetCBit2: OperatorCallback;\r\n\tSetCBit3: OperatorCallback;\r\n\tSetCBit4: OperatorCallback;\r\n\tSetCBit5: OperatorCallback;\r\n\tSetCBit6: OperatorCallback;\r\n\tSetCBit7: OperatorCallback;\r\n\tSetDBit0: OperatorCallback;\r\n\tSetDBit1: OperatorCallback;\r\n\tSetDBit2: OperatorCallback;\r\n\tSetDBit3: OperatorCallback;\r\n\tSetDBit4: OperatorCallback;\r\n\tSetDBit5: OperatorCallback;\r\n\tSetDBit6: OperatorCallback;\r\n\tSetDBit7: OperatorCallback;\r\n\tSetEBit0: OperatorCallback;\r\n\tSetEBit1: OperatorCallback;\r\n\tSetEBit2: OperatorCallback;\r\n\tSetEBit3: OperatorCallback;\r\n\tSetEBit4: OperatorCallback;\r\n\tSetEBit5: OperatorCallback;\r\n\tSetEBit6: OperatorCallback;\r\n\tSetEBit7: OperatorCallback;\r\n\tSetHBit0: OperatorCallback;\r\n\tSetHBit1: OperatorCallback;\r\n\tSetHBit2: OperatorCallback;\r\n\tSetHBit3: OperatorCallback;\r\n\tSetHBit4: OperatorCallback;\r\n\tSetHBit5: OperatorCallback;\r\n\tSetHBit6: OperatorCallback;\r\n\tSetHBit7: OperatorCallback;\r\n\tSetLBit0: OperatorCallback;\r\n\tSetLBit1: OperatorCallback;\r\n\tSetLBit2: OperatorCallback;\r\n\tSetLBit3: OperatorCallback;\r\n\tSetLBit4: OperatorCallback;\r\n\tSetLBit5: OperatorCallback;\r\n\tSetLBit6: OperatorCallback;\r\n\tSetLBit7: OperatorCallback;\r\n\tSetHLAddressBit0: OperatorCallback;\r\n\tSetHLAddressBit1: OperatorCallback;\r\n\tSetHLAddressBit2: OperatorCallback;\r\n\tSetHLAddressBit3: OperatorCallback;\r\n\tSetHLAddressBit4: OperatorCallback;\r\n\tSetHLAddressBit5: OperatorCallback;\r\n\tSetHLAddressBit6: OperatorCallback;\r\n\tSetHLAddressBit7: OperatorCallback;\r\n}\r\n\r\nconst operators: Partial<SetOperatorSet> = {};\r\n\r\n['a', 'b', 'c', 'd', 'e', 'h', 'l', 'm'].forEach((name: string) => {\r\n\tlet mask = 0x01;\r\n\r\n\tfor (let i = 0; i <= 7; i++) {\r\n\t\tlet key;\r\n\t\tlet callable;\r\n\r\n\t\tif (name === 'm') {\r\n\t\t\tkey = `SetHLAddressBit${i}`;\r\n\t\t\tcallable = (hardware: HardwareBusInterface) => setAddress(mask, hardware);\r\n\t\t} else {\r\n\t\t\tkey = `Set${name.toUpperCase()}Bit${i}`;\r\n\t\t\tcallable = (hardware: HardwareBusInterface) => set(<RegisterKey>name, mask, hardware.cpu.registers);\r\n\t\t}\r\n\r\n\t\toperators[key] = callable;\r\n\r\n\t\tmask *= 2;\r\n\t}\r\n});\r\n\r\nexport const SetOperators: SetOperatorSet = <SetOperatorSet>operators;","import {RegisterKey, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst shiftLeft = (name: RegisterKey, registers: RegisterSetInterface, extra: number = 0) => {\n\tconst co = registers[name] & 0x80 ? 0x10 : 0;\n\n\tregisters[name] = (registers[name] << 1) & 255 + extra;\n\n\tregisters.flags = registers[name] ? 0 : 0x80;\n\tregisters.flags = (registers.flags & 0xEF) + co;\n\n\tregisters.m = 2;\n};\n\nconst shiftLeftLogical = (name: RegisterKey, registers: RegisterSetInterface) => {\n\tshiftLeft(name, registers, 1);\n};\n\nexport interface ShiftLeftOperatorSet extends OperatorSet {\n\tShiftLeftAArithmetic: OperatorCallback;\n\tShiftLeftBArithmetic: OperatorCallback;\n\tShiftLeftCArithmetic: OperatorCallback;\n\tShiftLeftDArithmetic: OperatorCallback;\n\tShiftLeftEArithmetic: OperatorCallback;\n\tShiftLeftHArithmetic: OperatorCallback;\n\tShiftLeftLArithmetic: OperatorCallback;\n\n\tShiftLeftALogical: OperatorCallback;\n\tShiftLeftBLogical: OperatorCallback;\n\tShiftLeftCLogical: OperatorCallback;\n\tShiftLeftDLogical: OperatorCallback;\n\tShiftLeftELogical: OperatorCallback;\n\tShiftLeftHLogical: OperatorCallback;\n\tShiftLeftLLogical: OperatorCallback;\n}\n\nexport const ShiftLeftOperators: ShiftLeftOperatorSet = {\n\tShiftLeftAArithmetic: hardware => shiftLeft('a', hardware.cpu.registers),\n\tShiftLeftBArithmetic: hardware => shiftLeft('b', hardware.cpu.registers),\n\tShiftLeftCArithmetic: hardware => shiftLeft('c', hardware.cpu.registers),\n\tShiftLeftDArithmetic: hardware => shiftLeft('d', hardware.cpu.registers),\n\tShiftLeftEArithmetic: hardware => shiftLeft('e', hardware.cpu.registers),\n\tShiftLeftHArithmetic: hardware => shiftLeft('h', hardware.cpu.registers),\n\tShiftLeftLArithmetic: hardware => shiftLeft('l', hardware.cpu.registers),\n\n\tShiftLeftALogical: hardware => shiftLeftLogical('a', hardware.cpu.registers),\n\tShiftLeftBLogical: hardware => shiftLeftLogical('b', hardware.cpu.registers),\n\tShiftLeftCLogical: hardware => shiftLeftLogical('c', hardware.cpu.registers),\n\tShiftLeftDLogical: hardware => shiftLeftLogical('d', hardware.cpu.registers),\n\tShiftLeftELogical: hardware => shiftLeftLogical('e', hardware.cpu.registers),\n\tShiftLeftHLogical: hardware => shiftLeftLogical('h', hardware.cpu.registers),\n\tShiftLeftLLogical: hardware => shiftLeftLogical('l', hardware.cpu.registers),\n};","import {RegisterKey, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst shiftRight = (name: RegisterKey, registers: RegisterSetInterface) => {\n\tconst ci = registers[name] & 0x80;\n\tconst co = registers[name] & 1 ? 0x10 : 0;\n\n\tregisters[name] = ((registers[name] >> 1) + ci) & 255;\n\n\tregisters.flags = registers[name] ? 0 : 0x80;\n\tregisters.flags = (registers.flags & 0xEF) + co;\n\n\tregisters.m = 2;\n};\n\nconst shiftRightLogical = (name: RegisterKey, registers: RegisterSetInterface) => {\n\tconst co = registers[name] & 1 ? 0x10 : 0;\n\n\tregisters[name] = (registers[name] >> 1) & 255;\n\n\tregisters.flags = registers[name] ? 0 : 0x80;\n\tregisters.flags = (registers.flags & 0xEF) + co;\n\n\tregisters.m = 2;\n};\n\nexport interface ShiftRightOperatorSet extends OperatorSet {\n\tShiftRightAArithmetic: OperatorCallback;\n\tShiftRightBArithmetic: OperatorCallback;\n\tShiftRightCArithmetic: OperatorCallback;\n\tShiftRightDArithmetic: OperatorCallback;\n\tShiftRightEArithmetic: OperatorCallback;\n\tShiftRightHArithmetic: OperatorCallback;\n\tShiftRightLArithmetic: OperatorCallback;\n\n\tShiftRightALogical: OperatorCallback;\n\tShiftRightBLogical: OperatorCallback;\n\tShiftRightCLogical: OperatorCallback;\n\tShiftRightDLogical: OperatorCallback;\n\tShiftRightELogical: OperatorCallback;\n\tShiftRightHLogical: OperatorCallback;\n\tShiftRightLLogical: OperatorCallback;\n}\n\nexport const ShiftRightOperators: ShiftRightOperatorSet = {\n\tShiftRightAArithmetic: hardware => shiftRight('a', hardware.cpu.registers),\n\tShiftRightBArithmetic: hardware => shiftRight('b', hardware.cpu.registers),\n\tShiftRightCArithmetic: hardware => shiftRight('c', hardware.cpu.registers),\n\tShiftRightDArithmetic: hardware => shiftRight('d', hardware.cpu.registers),\n\tShiftRightEArithmetic: hardware => shiftRight('e', hardware.cpu.registers),\n\tShiftRightHArithmetic: hardware => shiftRight('h', hardware.cpu.registers),\n\tShiftRightLArithmetic: hardware => shiftRight('l', hardware.cpu.registers),\n\n\tShiftRightALogical: hardware => shiftRightLogical('a', hardware.cpu.registers),\n\tShiftRightBLogical: hardware => shiftRightLogical('b', hardware.cpu.registers),\n\tShiftRightCLogical: hardware => shiftRightLogical('c', hardware.cpu.registers),\n\tShiftRightDLogical: hardware => shiftRightLogical('d', hardware.cpu.registers),\n\tShiftRightELogical: hardware => shiftRightLogical('e', hardware.cpu.registers),\n\tShiftRightHLogical: hardware => shiftRightLogical('h', hardware.cpu.registers),\n\tShiftRightLLogical: hardware => shiftRightLogical('l', hardware.cpu.registers),\n};","import {HardwareBusInterface} from '../../../Hardware';\r\nimport {RegisterFlag, RegisterKey, RegisterSetInterface} from '../../Registers';\r\nimport {OperatorCallback, OperatorSet} from '../index';\r\n\r\nconst test = (name: RegisterKey, mask: number, registers: RegisterSetInterface) => {\r\n\tregisters.flags = registers[name] & mask ? 0 : RegisterFlag.ZERO;\r\n\r\n\tregisters.m = 2;\r\n};\r\n\r\nconst testAddress = (mask: number, hardware: HardwareBusInterface) => {\r\n\tconst registers = hardware.cpu.registers;\r\n\r\n\tregisters.flags = hardware.memory.readByte((registers.h << 8) + registers.l) & mask ? 0 : RegisterFlag.ZERO;\r\n\r\n\tregisters.m = 3;\r\n};\r\n\r\nexport interface TestOperatorSet extends OperatorSet {\r\n\tTestABit0: OperatorCallback;\r\n\tTestABit1: OperatorCallback;\r\n\tTestABit2: OperatorCallback;\r\n\tTestABit3: OperatorCallback;\r\n\tTestABit4: OperatorCallback;\r\n\tTestABit5: OperatorCallback;\r\n\tTestABit6: OperatorCallback;\r\n\tTestABit7: OperatorCallback;\r\n\tTestBBit0: OperatorCallback;\r\n\tTestBBit1: OperatorCallback;\r\n\tTestBBit2: OperatorCallback;\r\n\tTestBBit3: OperatorCallback;\r\n\tTestBBit4: OperatorCallback;\r\n\tTestBBit5: OperatorCallback;\r\n\tTestBBit6: OperatorCallback;\r\n\tTestBBit7: OperatorCallback;\r\n\tTestCBit0: OperatorCallback;\r\n\tTestCBit1: OperatorCallback;\r\n\tTestCBit2: OperatorCallback;\r\n\tTestCBit3: OperatorCallback;\r\n\tTestCBit4: OperatorCallback;\r\n\tTestCBit5: OperatorCallback;\r\n\tTestCBit6: OperatorCallback;\r\n\tTestCBit7: OperatorCallback;\r\n\tTestDBit0: OperatorCallback;\r\n\tTestDBit1: OperatorCallback;\r\n\tTestDBit2: OperatorCallback;\r\n\tTestDBit3: OperatorCallback;\r\n\tTestDBit4: OperatorCallback;\r\n\tTestDBit5: OperatorCallback;\r\n\tTestDBit6: OperatorCallback;\r\n\tTestDBit7: OperatorCallback;\r\n\tTestEBit0: OperatorCallback;\r\n\tTestEBit1: OperatorCallback;\r\n\tTestEBit2: OperatorCallback;\r\n\tTestEBit3: OperatorCallback;\r\n\tTestEBit4: OperatorCallback;\r\n\tTestEBit5: OperatorCallback;\r\n\tTestEBit6: OperatorCallback;\r\n\tTestEBit7: OperatorCallback;\r\n\tTestHBit0: OperatorCallback;\r\n\tTestHBit1: OperatorCallback;\r\n\tTestHBit2: OperatorCallback;\r\n\tTestHBit3: OperatorCallback;\r\n\tTestHBit4: OperatorCallback;\r\n\tTestHBit5: OperatorCallback;\r\n\tTestHBit6: OperatorCallback;\r\n\tTestHBit7: OperatorCallback;\r\n\tTestLBit0: OperatorCallback;\r\n\tTestLBit1: OperatorCallback;\r\n\tTestLBit2: OperatorCallback;\r\n\tTestLBit3: OperatorCallback;\r\n\tTestLBit4: OperatorCallback;\r\n\tTestLBit5: OperatorCallback;\r\n\tTestLBit6: OperatorCallback;\r\n\tTestLBit7: OperatorCallback;\r\n\tTestHLAddressBit0: OperatorCallback;\r\n\tTestHLAddressBit1: OperatorCallback;\r\n\tTestHLAddressBit2: OperatorCallback;\r\n\tTestHLAddressBit3: OperatorCallback;\r\n\tTestHLAddressBit4: OperatorCallback;\r\n\tTestHLAddressBit5: OperatorCallback;\r\n\tTestHLAddressBit6: OperatorCallback;\r\n\tTestHLAddressBit7: OperatorCallback;\r\n}\r\n\r\nconst operators: Partial<TestOperatorSet> = {};\r\n\r\n['a', 'b', 'c', 'd', 'e', 'h', 'l', 'm'].forEach((name: string) => {\r\n\tlet mask = 0x01;\r\n\r\n\tfor (let i = 0; i <= 7; i++) {\r\n\t\tlet key;\r\n\t\tlet callable;\r\n\r\n\t\tif (name === 'm') {\r\n\t\t\tkey = `TestHLAddressBit${i}`;\r\n\t\t\tcallable = (hardware: HardwareBusInterface) => testAddress(mask, hardware);\r\n\t\t} else {\r\n\t\t\tkey = `Test${name.toUpperCase()}Bit${i}`;\r\n\t\t\tcallable = (hardware: HardwareBusInterface) => test(<RegisterKey>name, mask, hardware.cpu.registers);\r\n\t\t}\r\n\r\n\t\toperators[key] = callable;\r\n\r\n\t\tmask *= 2;\r\n\t}\r\n});\r\n\r\nexport const TestOperators: TestOperatorSet = <TestOperatorSet>operators;","import {BitAndOperators, BitAndOperatorSet} from './Bitwise/And';\nimport {BitOrOperators, BitOrOperatorSet} from './Bitwise/Or';\nimport {BitXorOperators, BitXorOperatorSet} from './Bitwise/Xor';\nimport {OperatorSet} from './index';\n\nexport interface BitwiseOperatorSet extends OperatorSet,\n\tBitAndOperatorSet,\n\tBitOrOperatorSet,\n\tBitXorOperatorSet {\n}\n\nexport const BitwiseOperators: BitwiseOperatorSet = {\n\t...BitAndOperators,\n\t...BitOrOperators,\n\t...BitXorOperators,\n};","import {HardwareBusInterface} from '../../../Hardware';\nimport {RegisterFlag, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst and = (value: number, registers: RegisterSetInterface) => {\n\tregisters.a &= value;\n\tregisters.a &= 255;\n\n\tregisters.flags = registers.a ? 0 : RegisterFlag.ZERO;\n\n\tregisters.m = 1;\n};\n\nconst andAddress = (address: number, hardware: HardwareBusInterface) => {\n\tconst registers = hardware.cpu.registers;\n\n\tand(hardware.memory.readByte(address), registers);\n\n\tregisters.m = 2;\n};\n\nexport interface BitAndOperatorSet extends OperatorSet {\n\tBitAndA: OperatorCallback;\n\tBitAndB: OperatorCallback;\n\tBitAndC: OperatorCallback;\n\tBitAndD: OperatorCallback;\n\tBitAndE: OperatorCallback;\n\tBitAndH: OperatorCallback;\n\tBitAndL: OperatorCallback;\n\n\tBitAndHLAddress: OperatorCallback;\n\tBitAndPCAddress: OperatorCallback;\n}\n\nexport const BitAndOperators: BitAndOperatorSet = {\n\tBitAndA: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitAndB: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitAndC: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitAndD: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitAndE: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitAndH: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitAndL: hardware => and(hardware.cpu.registers.a, hardware.cpu.registers),\n\n\tBitAndHLAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tandAddress((registers.h << 8) + registers.l, hardware);\n\t},\n\tBitAndPCAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tandAddress(registers.programCount++, hardware);\n\t},\n};","import {HardwareBusInterface} from '../../../Hardware';\nimport {RegisterFlag, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst or = (value: number, registers: RegisterSetInterface) => {\n\tregisters.a |= value;\n\tregisters.a &= 255;\n\n\tregisters.flags = registers.a ? 0 : RegisterFlag.ZERO;\n\n\tregisters.m = 1;\n};\n\nconst orAddress = (address: number, hardware: HardwareBusInterface) => {\n\tconst registers = hardware.cpu.registers;\n\n\tor(hardware.memory.readByte(address), registers);\n\n\tregisters.m = 2;\n};\n\nexport interface BitOrOperatorSet extends OperatorSet {\n\tBitOrA: OperatorCallback;\n\tBitOrB: OperatorCallback;\n\tBitOrC: OperatorCallback;\n\tBitOrD: OperatorCallback;\n\tBitOrE: OperatorCallback;\n\tBitOrH: OperatorCallback;\n\tBitOrL: OperatorCallback;\n\n\tBitOrHLAddress: OperatorCallback;\n\tBitOrPCAddress: OperatorCallback;\n}\n\nexport const BitOrOperators: BitOrOperatorSet = {\n\tBitOrA: hardware => or(hardware.cpu.registers.a, hardware.cpu.registers),\n\tBitOrB: hardware => or(hardware.cpu.registers.b, hardware.cpu.registers),\n\tBitOrC: hardware => or(hardware.cpu.registers.c, hardware.cpu.registers),\n\tBitOrD: hardware => or(hardware.cpu.registers.d, hardware.cpu.registers),\n\tBitOrE: hardware => or(hardware.cpu.registers.e, hardware.cpu.registers),\n\tBitOrH: hardware => or(hardware.cpu.registers.h, hardware.cpu.registers),\n\tBitOrL: hardware => or(hardware.cpu.registers.l, hardware.cpu.registers),\n\n\tBitOrHLAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\torAddress((registers.h << 8) + registers.l, hardware);\n\t},\n\tBitOrPCAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\torAddress(registers.programCount++, hardware);\n\t},\n};","import {HardwareBusInterface} from '../../../Hardware';\r\nimport {RegisterFlag, RegisterSetInterface} from '../../Registers';\r\nimport {OperatorCallback, OperatorSet} from '../index';\r\n\r\nconst xor = (value: number, registers: RegisterSetInterface) => {\r\n\tregisters.a ^= value;\r\n\tregisters.a &= 255;\r\n\r\n\tregisters.flags = registers.a ? 0 : RegisterFlag.ZERO;\r\n\r\n\tregisters.m = 1;\r\n};\r\n\r\nconst xorAddress = (address: number, hardware: HardwareBusInterface) => {\r\n\txor(hardware.memory.readByte(address), hardware.cpu.registers);\r\n\r\n\thardware.cpu.registers.m = 2;\r\n};\r\n\r\nexport interface BitXorOperatorSet extends OperatorSet {\r\n\tBitXorA: OperatorCallback;\r\n\tBitXorB: OperatorCallback;\r\n\tBitXorC: OperatorCallback;\r\n\tBitXorD: OperatorCallback;\r\n\tBitXorE: OperatorCallback;\r\n\tBitXorH: OperatorCallback;\r\n\tBitXorL: OperatorCallback;\r\n\r\n\tBitXorHLAddress: OperatorCallback;\r\n\tBitXorPCAddress: OperatorCallback;\r\n}\r\n\r\nexport const BitXorOperators: BitXorOperatorSet = {\r\n\tBitXorA: hardware => xor(hardware.cpu.registers.a, hardware.cpu.registers),\r\n\tBitXorB: hardware => xor(hardware.cpu.registers.b, hardware.cpu.registers),\r\n\tBitXorC: hardware => xor(hardware.cpu.registers.c, hardware.cpu.registers),\r\n\tBitXorD: hardware => xor(hardware.cpu.registers.d, hardware.cpu.registers),\r\n\tBitXorE: hardware => xor(hardware.cpu.registers.e, hardware.cpu.registers),\r\n\tBitXorH: hardware => xor(hardware.cpu.registers.h, hardware.cpu.registers),\r\n\tBitXorL: hardware => xor(hardware.cpu.registers.l, hardware.cpu.registers),\r\n\r\n\tBitXorHLAddress: hardware => {\r\n\t\tconst registers = hardware.cpu.registers;\r\n\r\n\t\txorAddress((registers.h << 8) + registers.l, hardware);\r\n\t},\r\n\tBitXorPCAddress: hardware => xorAddress(hardware.cpu.registers.programCount++, hardware),\r\n};","import {RegisterFlag, RegisterSetInterface} from '../Registers';\nimport {OperatorCallback, OperatorSet} from './index';\n\nconst registerCompare = (value: number, registers: RegisterSetInterface) => {\n\tconst i = registers.a - value;\n\n\tregisters.flags |= RegisterFlag.OPERATION;\n\n\tif (!(i & 255))\n\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\tif (i < 255)\n\t\tregisters.flags |= RegisterFlag.CARRY;\n\n\tregisters.m = 1;\n};\n\nexport interface CompareOperatorSet extends OperatorSet {\n\tCompare_RegisterA: OperatorCallback;\n\tCompare_RegisterB: OperatorCallback;\n\tCompare_RegisterC: OperatorCallback;\n\tCompare_RegisterD: OperatorCallback;\n\tCompare_RegisterE: OperatorCallback;\n\tCompare_RegisterH: OperatorCallback;\n\tCompare_RegisterL: OperatorCallback;\n}\n\nexport const CompareOperators: CompareOperatorSet = {\n\tCompare_RegisterA: hardware => registerCompare(hardware.cpu.registers.a, hardware.cpu.registers),\n\tCompare_RegisterB: hardware => registerCompare(hardware.cpu.registers.b, hardware.cpu.registers),\n\tCompare_RegisterC: hardware => registerCompare(hardware.cpu.registers.c, hardware.cpu.registers),\n\tCompare_RegisterD: hardware => registerCompare(hardware.cpu.registers.d, hardware.cpu.registers),\n\tCompare_RegisterE: hardware => registerCompare(hardware.cpu.registers.e, hardware.cpu.registers),\n\tCompare_RegisterH: hardware => registerCompare(hardware.cpu.registers.h, hardware.cpu.registers),\n\tCompare_RegisterL: hardware => registerCompare(hardware.cpu.registers.l, hardware.cpu.registers),\n};","import {HardwareBusInterface} from '../../Hardware';\r\nimport {RegisterFlag, RegisterKey, RegisterSetInterface} from '../Registers';\r\nimport {OperatorCallback, OperatorSet} from './index';\r\n\r\nconst decrement = (name: RegisterKey, registers: RegisterSetInterface) => {\r\n\tregisters[name] = (registers[name] - 1) & 255;\r\n\tregisters.flags = registers[name] ? 0 : RegisterFlag.ZERO;\r\n\r\n\tregisters.m = 1;\r\n};\r\n\r\nconst decrementAddress = (address: number, hardware: HardwareBusInterface) => {\r\n\tconst memory = hardware.memory;\r\n\r\n\tconst value = (memory.readByte(address) - 1) & 255;\r\n\r\n\tmemory.writeByte(address, value);\r\n\r\n\thardware.cpu.registers.flags = value ? 0 : RegisterFlag.ZERO;\r\n\thardware.cpu.registers.m = 3;\r\n};\r\n\r\nconst decrement16 = (highReg: RegisterKey, lowReg: RegisterKey, registers: RegisterSetInterface) => {\r\n\tregisters[lowReg] = (registers[lowReg] - 1) & 255;\r\n\r\n\tif (!registers[lowReg])\r\n\t\tregisters[highReg] = (registers[highReg] - 1) & 255;\r\n\r\n\tregisters.m = 1;\r\n};\r\n\r\nexport interface DecrementOperatorSet extends OperatorSet {\r\n\tDecrementA: OperatorCallback;\r\n\tDecrementB: OperatorCallback;\r\n\tDecrementC: OperatorCallback;\r\n\tDecrementD: OperatorCallback;\r\n\tDecrementE: OperatorCallback;\r\n\tDecrementH: OperatorCallback;\r\n\tDecrementL: OperatorCallback;\r\n\r\n\tDecrementHLAddress: OperatorCallback;\r\n\r\n\tDecrementBC: OperatorCallback;\r\n\tDecrementDE: OperatorCallback;\r\n\tDecrementHL: OperatorCallback;\r\n\r\n\tDecrementSP: OperatorCallback;\r\n}\r\n\r\nexport const DecrementOperators: DecrementOperatorSet = {\r\n\tDecrementA: hardware => decrement('a', hardware.cpu.registers),\r\n\tDecrementB: hardware => decrement('b', hardware.cpu.registers),\r\n\tDecrementC: hardware => decrement('c', hardware.cpu.registers),\r\n\tDecrementD: hardware => decrement('d', hardware.cpu.registers),\r\n\tDecrementE: hardware => decrement('e', hardware.cpu.registers),\r\n\tDecrementH: hardware => decrement('h', hardware.cpu.registers),\r\n\tDecrementL: hardware => decrement('l', hardware.cpu.registers),\r\n\r\n\tDecrementHLAddress: hardware => {\r\n\t\tconst registers = hardware.cpu.registers;\r\n\r\n\t\tdecrementAddress((registers.h << 8) + registers.l, hardware);\r\n\t},\r\n\r\n\tDecrementBC: hardware => decrement16('b', 'c', hardware.cpu.registers),\r\n\tDecrementDE: hardware => decrement16('d', 'e', hardware.cpu.registers),\r\n\tDecrementHL: hardware => decrement16('h', 'l', hardware.cpu.registers),\r\n\r\n\tDecrementSP: hardware => {\r\n\t\tconst registers = hardware.cpu.registers;\r\n\r\n\t\tregisters.stackPointer = (registers.stackPointer - 1) & 65535;\r\n\t\tregisters.m = 1;\r\n\t},\r\n};","import {RegisterFlag} from '../Registers';\nimport {OperatorCallback, OperatorSet} from './index';\n\nexport interface ExtraOperatorSet extends OperatorSet {\n\tBCDCorrect: OperatorCallback;\n\tExtraOperators: OperatorCallback;\n\tHalt: OperatorCallback;\n\tNoImpl: OperatorCallback;\n\tNoImplExtra: OperatorCallback;\n\tNoop: OperatorCallback;\n}\n\nexport const ExtraOperators: ExtraOperatorSet = {\n\tBCDCorrect: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tconst original = registers.a;\n\n\t\tif ((registers.flags & RegisterFlag.HALF_CARRY) || (registers.a & 15) > 9)\n\t\t\tregisters.a += 6;\n\n\t\tregisters.flags &= 0xEF;\n\n\t\tif ((registers.flags & RegisterFlag.HALF_CARRY) || original > 0x99) {\n\t\t\tregisters.a += 0x60;\n\t\t\tregisters.flags |= RegisterFlag.CARRY;\n\t\t}\n\n\t\tregisters.m = 1;\n\t},\n\tExtraOperators: hardware => {\n\t\tconst registers = hardware.registers;\n\n\t\tconst i = hardware.memory.readByte(registers.programCount++);\n\t\tregisters.programCount &= 65535;\n\n\t\tif (hardware.cpu.cbcodes[i])\n\t\t\thardware.cpu.cbcodes[i](hardware);\n\t\telse\n\t\t\thardware.cpu.operators.NoImplExtra(hardware);\n\t},\n\tHalt: hardware => {\n\t\thardware.cpu.halt = true;\n\t\thardware.registers.m = 1;\n\t},\n\tNoImpl: hardware => {\n\t\tconst offset = hardware.cpu.registers.programCount - 1;\n\t\tconst opcode = hardware.memory.readByte(offset);\n\n\t\tconsole.error(`Unimplemented instruction 0x${opcode.toString(16).toUpperCase()} at offset 0x${offset.toString(16).toUpperCase()}, stopping`);\n\n\t\thardware.cpu.stop = true;\n\t},\n\tNoImplExtra: hardware => {\n\t\tconst offset = hardware.cpu.registers.programCount - 1;\n\t\tconst opcode = hardware.memory.readByte(offset);\n\n\t\tconsole.error(`Unimplemented extra instruction 0x${opcode.toString(16).toUpperCase()} at offset 0x${offset.toString(16).toUpperCase()}, stopping`);\n\n\t\thardware.cpu.stop = true;\n\t},\n\tNoop: hardware => {\n\t\thardware.cpu.registers.m = 1;\n\t},\n\n};","import {HardwareBusInterface} from '../../Hardware';\r\nimport {RegisterFlag, RegisterKey, RegisterSetInterface} from '../Registers';\r\nimport {OperatorCallback, OperatorSet} from './index';\r\n\r\nconst increment = (name: RegisterKey, registers: RegisterSetInterface) => {\r\n\tregisters[name] = (registers[name] + 1) & 255;\r\n\tregisters.flags = registers[name] ? 0 : RegisterFlag.ZERO;\r\n\r\n\tregisters.m = 1;\r\n};\r\n\r\nconst incrementAddress = (address: number, hardware: HardwareBusInterface) => {\r\n\tconst memory = hardware.memory;\r\n\r\n\tconst value = (memory.readByte(address) + 1) & 255;\r\n\r\n\tmemory.writeByte(address, value);\r\n\r\n\thardware.cpu.registers.flags = value ? 0 : RegisterFlag.ZERO;\r\n\thardware.cpu.registers.m = 3;\r\n};\r\n\r\nconst increment16 = (highReg: RegisterKey, lowReg: RegisterKey, registers: RegisterSetInterface) => {\r\n\tregisters[lowReg] = (registers[lowReg] + 1) & 255;\r\n\r\n\tif (!registers[lowReg])\r\n\t\tregisters[highReg] = (registers[highReg] + 1) & 255;\r\n\r\n\tregisters.m = 1;\r\n};\r\n\r\nexport interface IncrementOperatorSet extends OperatorSet {\r\n\tIncrementA: OperatorCallback;\r\n\tIncrementB: OperatorCallback;\r\n\tIncrementC: OperatorCallback;\r\n\tIncrementD: OperatorCallback;\r\n\tIncrementE: OperatorCallback;\r\n\tIncrementH: OperatorCallback;\r\n\tIncrementL: OperatorCallback;\r\n\r\n\tIncrementHLAddress: OperatorCallback;\r\n\r\n\tIncrementBC: OperatorCallback;\r\n\tIncrementDE: OperatorCallback;\r\n\tIncrementHL: OperatorCallback;\r\n\r\n\tIncrementSP: OperatorCallback;\r\n}\r\n\r\nexport const IncrementOperators: IncrementOperatorSet = {\r\n\tIncrementA: hardware => increment('a', hardware.cpu.registers),\r\n\tIncrementB: hardware => increment('b', hardware.cpu.registers),\r\n\tIncrementC: hardware => increment('c', hardware.cpu.registers),\r\n\tIncrementD: hardware => increment('d', hardware.cpu.registers),\r\n\tIncrementE: hardware => increment('e', hardware.cpu.registers),\r\n\tIncrementH: hardware => increment('h', hardware.cpu.registers),\r\n\tIncrementL: hardware => increment('l', hardware.cpu.registers),\r\n\r\n\tIncrementHLAddress: hardware => {\r\n\t\tconst registers = hardware.cpu.registers;\r\n\r\n\t\tincrementAddress((registers.h << 8) + registers.l, hardware);\r\n\t},\r\n\r\n\tIncrementBC: hardware => increment16('b', 'c', hardware.cpu.registers),\r\n\tIncrementDE: hardware => increment16('d', 'e', hardware.cpu.registers),\r\n\tIncrementHL: hardware => increment16('h', 'l', hardware.cpu.registers),\r\n\r\n\tIncrementSP: hardware => {\r\n\t\tconst registers = hardware.cpu.registers;\r\n\r\n\t\tregisters.stackPointer = (registers.stackPointer + 1) & 65535;\r\n\r\n\t\tregisters.m = 1;\r\n\t},\r\n};","import {HardwareBusInterface} from '../../Hardware';\nimport {RegisterKey, RegisterSetInterface} from '../Registers';\nimport {OperatorCallback, OperatorSet} from './index';\n\nconst registerKeys: RegisterKey[] = ['a', 'b', 'c', 'd', 'e', 'h', 'l'];\n\nclass RegisterStorage {\n\tprivate static registers: { [key: string]: number } = {\n\t\ta: 0,\n\t\tb: 0,\n\t\tc: 0,\n\t\td: 0,\n\t\te: 0,\n\t\th: 0,\n\t\tl: 0,\n\t};\n\n\tpublic static save(registers: RegisterSetInterface): void {\n\t\tregisterKeys.forEach(key => this.registers[key] = registers[key]);\n\t}\n\n\tpublic static restore(registers: RegisterSetInterface): void {\n\t\tregisterKeys.forEach(key => registers[key] = this.registers[key]);\n\t}\n}\n\nconst interrupt = (value: number, hardware: HardwareBusInterface) => {\n\tconst registers = hardware.registers;\n\n\tRegisterStorage.save(registers);\n\n\tregisters.stackPointer -= 2;\n\thardware.memory.writeWord(registers.stackPointer, registers.programCount);\n\n\tregisters.programCount = value;\n\tregisters.m = 3;\n};\n\nexport enum Interrupt {\n\tVBLANK = 1,\n\tLCD_STAT = 2,\n\tTIMER = 4,\n\tSERIAL = 8,\n\tJOYPAD = 16,\n}\n\nexport interface InterruptOperatorSet extends OperatorSet {\n\tInterruptEnable: OperatorCallback;\n\tInterruptDisable: OperatorCallback;\n\tInterruptReturn: OperatorCallback;\n\n\t// TODO Find a better name for these (RSTXX)\n\tInterrupt00: OperatorCallback;\n\tInterrupt08: OperatorCallback;\n\tInterrupt10: OperatorCallback;\n\tInterrupt18: OperatorCallback;\n\tInterrupt20: OperatorCallback;\n\tInterrupt28: OperatorCallback;\n\tInterrupt30: OperatorCallback;\n\tInterrupt38: OperatorCallback;\n\tInterrupt40: OperatorCallback;\n\tInterrupt48: OperatorCallback;\n\tInterrupt50: OperatorCallback;\n\tInterrupt58: OperatorCallback;\n\tInterrupt60: OperatorCallback;\n}\n\nexport const InterruptOperators: InterruptOperatorSet = {\n\tInterruptEnable: hardware => {\n\t\thardware.cpu.allowInterrupts = true;\n\t\thardware.registers.m = 1;\n\t},\n\tInterruptDisable: hardware => {\n\t\thardware.cpu.allowInterrupts = false;\n\t\thardware.registers.m = 1;\n\t},\n\tInterruptReturn: hardware => {\n\t\tconst registers = hardware.registers;\n\n\t\thardware.cpu.allowInterrupts = true;\n\n\t\tRegisterStorage.restore(registers);\n\n\t\tregisters.programCount = hardware.memory.readWord(registers.stackPointer);\n\t\tregisters.stackPointer += 2;\n\n\t\tregisters.m = 3;\n\t},\n\n\tInterrupt00: hardware => interrupt(0x00, hardware),\n\tInterrupt08: hardware => interrupt(0x08, hardware),\n\tInterrupt10: hardware => interrupt(0x10, hardware),\n\tInterrupt18: hardware => interrupt(0x18, hardware),\n\tInterrupt20: hardware => interrupt(0x20, hardware),\n\tInterrupt28: hardware => interrupt(0x28, hardware),\n\tInterrupt30: hardware => interrupt(0x30, hardware),\n\tInterrupt38: hardware => interrupt(0x38, hardware),\n\tInterrupt40: hardware => interrupt(0x40, hardware),\n\tInterrupt48: hardware => interrupt(0x48, hardware),\n\tInterrupt50: hardware => interrupt(0x50, hardware),\n\tInterrupt58: hardware => interrupt(0x58, hardware),\n\tInterrupt60: hardware => interrupt(0x60, hardware),\n};","import {HardwareBusInterface} from '../../Hardware';\nimport {OperatorCallback, OperatorSet, testCarry, testZero} from './index';\n\nconst absJumpIf = (test: boolean, hardware: HardwareBusInterface) => {\n\tconst {memory, registers} = hardware;\n\n\tregisters.m = 3;\n\n\tif (test) {\n\t\tregisters.programCount = memory.readWord(registers.programCount);\n\n\t\t++registers.m;\n\t} else\n\t\tregisters.programCount += 2;\n};\n\nconst relJumpIf = (test: boolean, hardware: HardwareBusInterface) => {\n\tconst {memory, registers} = hardware;\n\n\tlet offset = memory.readByte(registers.programCount++);\n\n\tif (offset > 127)\n\t\toffset = -((~offset + 1) & 255);\n\n\tregisters.m = 2;\n\n\tif (test) {\n\t\tregisters.programCount += offset;\n\n\t\t++registers.m;\n\t}\n};\n\nconst labelJumpIf = (test: boolean, hardware: HardwareBusInterface) => {\n\tconst {memory, registers} = hardware;\n\n\tregisters.m = 3;\n\n\tif (test) {\n\t\tregisters.stackPointer -= 2;\n\n\t\tmemory.writeWord(registers.stackPointer, registers.programCount + 2);\n\t\tregisters.programCount = memory.readWord(registers.programCount);\n\n\t\tregisters.m += 2;\n\t} else\n\t\tregisters.programCount += 2;\n};\n\nexport interface JumpOperatorSet extends OperatorSet {\n\tAbsoluteJumpToPCAddress: OperatorCallback;\n\tAbsoluteJumpToHLAddress: OperatorCallback;\n\n\tAbsoluteJumpToPCAddressIfCarry: OperatorCallback;\n\tAbsoluteJumpToPCAddressIfNotCarry: OperatorCallback;\n\tAbsoluteJumpToPCAddressIfZero: OperatorCallback;\n\tAbsoluteJumpToPCAddressIfNotZero: OperatorCallback;\n\n\tRelativeJumpToPCAddress: OperatorCallback;\n\n\tRelativeJumpToPCAddressIfCarry: OperatorCallback;\n\tRelativeJumpToPCAddressIfNotCarry: OperatorCallback;\n\tRelativeJumpToPCAddressIfZero: OperatorCallback;\n\tRelativeJumpToPCAddressIfNotZero: OperatorCallback;\n\n\tRelativeJumpToPCAddressDecrementB: OperatorCallback;\n\n\tLabelJumpPCAddress: OperatorCallback;\n\tLabelJumpPCAddressIfCarry: OperatorCallback;\n\tLabelJumpPCAddressIfNotCarry: OperatorCallback;\n\tLabelJumpPCAddressIfZero: OperatorCallback;\n\tLabelJumpPCAddressIfNotZero: OperatorCallback;\n}\n\nexport const JumpOperators: JumpOperatorSet = {\n\tAbsoluteJumpToPCAddress: hardware => {\n\t\tconst registers = hardware.registers;\n\n\t\tregisters.programCount = hardware.memory.readWord(registers.programCount);\n\t\tregisters.m = 3;\n\t},\n\tAbsoluteJumpToHLAddress: hardware => {\n\t\tconst registers = hardware.registers;\n\n\t\tregisters.programCount = (registers.h << 8) + registers.l;\n\t\tregisters.m = 1;\n\t},\n\n\tAbsoluteJumpToPCAddressIfZero: hardware => absJumpIf(testZero(hardware), hardware),\n\tAbsoluteJumpToPCAddressIfNotZero: hardware => absJumpIf(!testZero(hardware), hardware),\n\tAbsoluteJumpToPCAddressIfCarry: hardware => absJumpIf(testCarry(hardware), hardware),\n\tAbsoluteJumpToPCAddressIfNotCarry: hardware => absJumpIf(!testCarry(hardware), hardware),\n\n\tRelativeJumpToPCAddress: hardware => relJumpIf(true, hardware),\n\tRelativeJumpToPCAddressIfCarry: hardware => relJumpIf(testCarry(hardware), hardware),\n\tRelativeJumpToPCAddressIfNotCarry: hardware => relJumpIf(!testCarry(hardware), hardware),\n\tRelativeJumpToPCAddressIfZero: hardware => relJumpIf(testZero(hardware), hardware),\n\tRelativeJumpToPCAddressIfNotZero: hardware => relJumpIf(!testZero(hardware), hardware),\n\n\tRelativeJumpToPCAddressDecrementB: hardware => relJumpIf(--hardware.registers.b !== 0, hardware),\n\n\tLabelJumpPCAddress: hardware => labelJumpIf(true, hardware),\n\tLabelJumpPCAddressIfCarry: hardware => labelJumpIf(testCarry(hardware), hardware),\n\tLabelJumpPCAddressIfNotCarry: hardware => labelJumpIf(!testCarry(hardware), hardware),\n\tLabelJumpPCAddressIfZero: hardware => labelJumpIf(testZero(hardware), hardware),\n\tLabelJumpPCAddressIfNotZero: hardware => labelJumpIf(!testZero(hardware), hardware),\n};","import {OperatorSet} from './index';\nimport {MemoryToMemoryOperators, MemoryToMemoryOperatorSet} from './LoadStore/MemoryToMemory';\nimport {MemoryToRegisterOperators, MemoryToRegisterOperatorSet} from './LoadStore/MemoryToRegister';\nimport {ProgramCountOperators, ProgramCountOperatorSet} from './LoadStore/ProgramCount';\nimport {RegisterToMemoryOperators, RegisterToMemoryOperatorSet} from './LoadStore/RegisterToMemory';\nimport {RegisterToRegisterOperators, RegisterToRegisterOperatorSet} from './LoadStore/RegisterToRegister';\nimport {SwapOperators, SwapOperatorSet} from './LoadStore/Swap';\n\nexport interface LoadStoreOperatorSet extends OperatorSet,\n\tMemoryToMemoryOperatorSet,\n\tMemoryToRegisterOperatorSet,\n\tProgramCountOperatorSet,\n\tRegisterToMemoryOperatorSet,\n\tRegisterToRegisterOperatorSet,\n\tSwapOperatorSet {\n}\n\nexport const LoadStoreOperators: LoadStoreOperatorSet = {\n\t...MemoryToMemoryOperators,\n\t...MemoryToRegisterOperators,\n\t...ProgramCountOperators,\n\t...RegisterToMemoryOperators,\n\t...RegisterToRegisterOperators,\n\t...SwapOperators,\n};\n","import {OperatorCallback, OperatorSet} from '../index';\n\nexport interface MemoryToMemoryOperatorSet extends OperatorSet {\n\tLoadPCIntoHLAddress: OperatorCallback;\n}\n\nexport const MemoryToMemoryOperators: MemoryToMemoryOperatorSet = {\n\tLoadPCIntoHLAddress: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tmemory.writeByte((registers.h << 8) + registers.l, memory.readByte(registers.programCount++));\n\n\t\tregisters.m = 3;\n\t},\n};","import {HardwareBusInterface} from '../../../Hardware';\nimport {RegisterKey} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst loadMemoryToRegister = (destination: RegisterKey, highReg: RegisterKey, lowReg: RegisterKey, hardware: HardwareBusInterface) => {\n\tconst memory = hardware.memory;\n\tconst registers = hardware.cpu.registers;\n\n\tconst high = registers[highReg];\n\tconst low = registers[lowReg];\n\n\tregisters[destination] = memory.readByte((high << 8) + low);\n\n\tregisters.m = 2;\n};\n\nconst loadHLMemoryToRegister = (destination: RegisterKey, hardware: HardwareBusInterface) => {\n\tloadMemoryToRegister(destination, 'h', 'l', hardware);\n};\n\nconst loadPCAndNextIntoRegister = (destinationA: RegisterKey, destinationB: RegisterKey, hardware: HardwareBusInterface) => {\n\tconst memory = hardware.memory;\n\tconst registers = hardware.cpu.registers;\n\n\tregisters[destinationA] = memory.readByte(registers.programCount++);\n\tregisters[destinationB] = memory.readByte(registers.programCount++);\n\n\tregisters.m = 3;\n};\n\nexport interface MemoryToRegisterOperatorSet extends OperatorSet {\n\tLoadHLAddressIntoA: OperatorCallback;\n\tLoadHLAddressIntoB: OperatorCallback;\n\tLoadHLAddressIntoC: OperatorCallback;\n\tLoadHLAddressIntoD: OperatorCallback;\n\tLoadHLAddressIntoE: OperatorCallback;\n\tLoadHLAddressIntoH: OperatorCallback;\n\tLoadHLAddressIntoL: OperatorCallback;\n\n\tLoadBCAddressIntoA: OperatorCallback;\n\tLoadDEAddressIntoA: OperatorCallback;\n\n\tLoadPCAndNextIntoBC: OperatorCallback;\n\tLoadPCAndNextIntoDE: OperatorCallback;\n\tLoadPCAndNextIntoHL: OperatorCallback;\n\tLoadPCAndNextIntoSP: OperatorCallback;\n\n\tLoadPCWordIntoLH: OperatorCallback;\n\n\tLoadHLAddressIntoAAndIncrement: OperatorCallback;\n\tLoadHLAddressIntoAAndDecrement: OperatorCallback;\n\n\tLoadPCWithMagicIntoA: OperatorCallback;\n\tLoadCWithMagicAddressIntoA: OperatorCallback;\n}\n\nexport const MemoryToRegisterOperators: MemoryToRegisterOperatorSet = {\n\tLoadHLAddressIntoA: hardware => loadHLMemoryToRegister('a', hardware),\n\tLoadHLAddressIntoB: hardware => loadHLMemoryToRegister('b', hardware),\n\tLoadHLAddressIntoC: hardware => loadHLMemoryToRegister('c', hardware),\n\tLoadHLAddressIntoD: hardware => loadHLMemoryToRegister('d', hardware),\n\tLoadHLAddressIntoE: hardware => loadHLMemoryToRegister('e', hardware),\n\tLoadHLAddressIntoH: hardware => loadHLMemoryToRegister('h', hardware),\n\tLoadHLAddressIntoL: hardware => loadHLMemoryToRegister('l', hardware),\n\n\tLoadBCAddressIntoA: hardware => loadMemoryToRegister('a', 'b', 'c', hardware),\n\tLoadDEAddressIntoA: hardware => loadMemoryToRegister('a', 'd', 'e', hardware),\n\n\tLoadPCAndNextIntoBC: hardware => loadPCAndNextIntoRegister('b', 'c', hardware),\n\tLoadPCAndNextIntoDE: hardware => loadPCAndNextIntoRegister('d', 'e', hardware),\n\tLoadPCAndNextIntoHL: hardware => loadPCAndNextIntoRegister('h', 'l', hardware),\n\tLoadPCAndNextIntoSP: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.stackPointer = hardware.memory.readWord(registers.programCount);\n\t\tregisters.programCount += 2;\n\n\t\tregisters.m = 3;\n\t},\n\n\tLoadPCWordIntoLH: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tconst index = memory.readWord(registers.programCount);\n\n\t\tregisters.programCount += 2;\n\n\t\t// TODO Should this be reversed?\n\t\tregisters.l = memory.readByte(index);\n\t\tregisters.h = memory.readByte(index + 1);\n\n\t\tregisters.m = 5;\n\t},\n\n\tLoadHLAddressIntoAAndIncrement: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a = memory.readByte((registers.h << 8) + registers.l);\n\n\t\tregisters.l = (registers.l + 1) & 255;\n\n\t\tif (!registers.l)\n\t\t\tregisters.h = (registers.h + 1) & 255;\n\n\t\tregisters.m = 2;\n\t},\n\n\tLoadHLAddressIntoAAndDecrement: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a = memory.readByte((registers.h << 8) + registers.l);\n\n\t\tregisters.l = (registers.l - 1) & 255;\n\n\t\tif (registers.l === 255)\n\t\t\tregisters.h = (registers.h - 1) & 255;\n\n\t\tregisters.m = 2;\n\t},\n\n\tLoadPCWithMagicIntoA: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a = memory.readByte(0xFF00 + memory.readByte(registers.programCount++));\n\n\t\tregisters.m = 3;\n\t},\n\n\tLoadCWithMagicAddressIntoA: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a = memory.readByte(0xFF00 + registers.c);\n\n\t\tregisters.m = 2;\n\t},\n};","import {MemoryInterface} from '../../../Memory/index';\nimport {RegisterKey, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst pcToRegisterAndAdvance = (destination: RegisterKey, memory: MemoryInterface, registers: RegisterSetInterface) => {\n\tregisters[destination] = memory.readByte(registers.programCount++);\n};\n\nexport interface ProgramCountOperatorSet extends OperatorSet {\n\tLoadPCToA_Advance: OperatorCallback;\n\tLoadPCToB_Advance: OperatorCallback;\n\tLoadPCToC_Advance: OperatorCallback;\n\tLoadPCToD_Advance: OperatorCallback;\n\tLoadPCToE_Advance: OperatorCallback;\n\tLoadPCToH_Advance: OperatorCallback;\n\tLoadPCToL_Advance: OperatorCallback;\n\n\tLoadPCWordIntoA: OperatorCallback;\n\n\tLoadPCWordIntoHL: OperatorCallback;\n\n\tSomeCrazyShitWithHLAndSP: OperatorCallback;\n}\n\nexport const ProgramCountOperators: ProgramCountOperatorSet = {\n\tLoadPCToA_Advance: hardware => pcToRegisterAndAdvance('a', hardware.memory, hardware.cpu.registers),\n\tLoadPCToB_Advance: hardware => pcToRegisterAndAdvance('b', hardware.memory, hardware.cpu.registers),\n\tLoadPCToC_Advance: hardware => pcToRegisterAndAdvance('c', hardware.memory, hardware.cpu.registers),\n\tLoadPCToD_Advance: hardware => pcToRegisterAndAdvance('d', hardware.memory, hardware.cpu.registers),\n\tLoadPCToE_Advance: hardware => pcToRegisterAndAdvance('e', hardware.memory, hardware.cpu.registers),\n\tLoadPCToH_Advance: hardware => pcToRegisterAndAdvance('h', hardware.memory, hardware.cpu.registers),\n\tLoadPCToL_Advance: hardware => pcToRegisterAndAdvance('l', hardware.memory, hardware.cpu.registers),\n\n\tLoadPCWordIntoA: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tregisters.a = memory.readByte(memory.readWord(registers.programCount));\n\t\tregisters.programCount += 2;\n\n\t\tregisters.m = 4;\n\t},\n\n\tLoadPCWordIntoHL: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tconst index = memory.readWord(registers.programCount);\n\n\t\tregisters.programCount += 2;\n\n\t\tmemory.writeWord(index, (registers.h << 8) + registers.l);\n\n\t\tregisters.m = 5;\n\t},\n\n\tSomeCrazyShitWithHLAndSP: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tlet i = memory.readByte(registers.programCount++);\n\n\t\tif (i > 127)\n\t\t\ti = -((~i + 1) & 255);\n\n\t\ti += registers.stackPointer;\n\n\t\tregisters.h = (i >> 8) & 255;\n\t\tregisters.l = i & 255;\n\n\t\tregisters.m = 3;\n\t},\n};","import {HardwareBusInterface} from '../../../Hardware';\nimport {RegisterKey} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst loadRegisterToMemory = (source: RegisterKey, highReg: RegisterKey, lowReg: RegisterKey, hardware: HardwareBusInterface) => {\n\tconst memory = hardware.memory;\n\tconst registers = hardware.cpu.registers;\n\n\tconst high = registers[highReg];\n\tconst low = registers[lowReg];\n\n\tmemory.writeByte((high << 8) + low, registers[source]);\n\n\tregisters.m = 2;\n};\n\nconst loadRegisterToHLMemory = (source: RegisterKey, hardware: HardwareBusInterface) => {\n\tloadRegisterToMemory(source, 'h', 'l', hardware);\n};\n\nexport interface RegisterToMemoryOperatorSet extends OperatorSet {\n\tLoadAIntoHLAddress: OperatorCallback;\n\tLoadBIntoHLAddress: OperatorCallback;\n\tLoadCIntoHLAddress: OperatorCallback;\n\tLoadDIntoHLAddress: OperatorCallback;\n\tLoadEIntoHLAddress: OperatorCallback;\n\tLoadHIntoHLAddress: OperatorCallback;\n\tLoadLIntoHLAddress: OperatorCallback;\n\n\tLoadAIntoBCAddress: OperatorCallback;\n\tLoadAIntoDEAddress: OperatorCallback;\n\n\tLoadAIntoPCAddress: OperatorCallback;\n\n\tLoadAIntoHLAddressAndIncrement: OperatorCallback;\n\tLoadAIntoHLAddressAndDecrement: OperatorCallback;\n\n\tLoadAIntoPCWithMagicAddress: OperatorCallback;\n\tLoadAIntoCWithMagicAddress: OperatorCallback;\n}\n\nexport const RegisterToMemoryOperators: RegisterToMemoryOperatorSet = {\n\tLoadAIntoHLAddress: hardware => loadRegisterToHLMemory('a', hardware),\n\tLoadBIntoHLAddress: hardware => loadRegisterToHLMemory('b', hardware),\n\tLoadCIntoHLAddress: hardware => loadRegisterToHLMemory('c', hardware),\n\tLoadDIntoHLAddress: hardware => loadRegisterToHLMemory('d', hardware),\n\tLoadEIntoHLAddress: hardware => loadRegisterToHLMemory('e', hardware),\n\tLoadHIntoHLAddress: hardware => loadRegisterToHLMemory('h', hardware),\n\tLoadLIntoHLAddress: hardware => loadRegisterToHLMemory('l', hardware),\n\n\tLoadAIntoBCAddress: hardware => loadRegisterToMemory('a', 'b', 'c', hardware),\n\tLoadAIntoDEAddress: hardware => loadRegisterToMemory('a', 'd', 'e', hardware),\n\n\tLoadAIntoPCAddress: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tmemory.writeByte(memory.readWord(registers.programCount), registers.a);\n\t\tregisters.programCount += 2;\n\n\t\tregisters.m = 4;\n\t},\n\n\tLoadAIntoHLAddressAndIncrement: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tmemory.writeByte((registers.h << 8) + registers.l, registers.a);\n\n\t\tregisters.l = (registers.l + 1) & 255;\n\n\t\tif (!registers.l)\n\t\t\tregisters.h = (registers.h + 1) & 255;\n\n\t\tregisters.m = 2;\n\t},\n\n\tLoadAIntoHLAddressAndDecrement: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tmemory.writeByte((registers.h << 8) + registers.l, registers.a);\n\n\t\tregisters.l = (registers.l - 1) & 255;\n\n\t\tif (registers.l === 255)\n\t\t\tregisters.h = (registers.h - 1) & 255;\n\n\t\tregisters.m = 2;\n\t},\n\n\tLoadAIntoPCWithMagicAddress: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tmemory.writeByte(0xFF00 + memory.readByte(registers.programCount++), registers.a);\n\n\t\tregisters.m = 3;\n\t},\n\n\tLoadAIntoCWithMagicAddress: hardware => {\n\t\tconst memory = hardware.memory;\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tmemory.writeByte(0xFF00 + registers.c, registers.a);\n\n\t\tregisters.m = 2;\n\t},\n};","import {RegisterKey, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst writeToRegister = (destination: RegisterKey, source: number, registers: RegisterSetInterface) => {\n\tregisters[destination] = source;\n\n\tregisters.m = 1;\n};\n\n/**\n * Keys follow the pattern of LoadRegXY, meaning:\n * \t\tLoad the value of Y into X\n */\nexport interface RegisterToRegisterOperatorSet extends OperatorSet {\n\tLoadRegAA: OperatorCallback;\n\tLoadRegAB: OperatorCallback;\n\tLoadRegAC: OperatorCallback;\n\tLoadRegAD: OperatorCallback;\n\tLoadRegAE: OperatorCallback;\n\tLoadRegAH: OperatorCallback;\n\tLoadRegAL: OperatorCallback;\n\tLoadRegBA: OperatorCallback;\n\tLoadRegBB: OperatorCallback;\n\tLoadRegBC: OperatorCallback;\n\tLoadRegBD: OperatorCallback;\n\tLoadRegBE: OperatorCallback;\n\tLoadRegBH: OperatorCallback;\n\tLoadRegBL: OperatorCallback;\n\tLoadRegCA: OperatorCallback;\n\tLoadRegCB: OperatorCallback;\n\tLoadRegCC: OperatorCallback;\n\tLoadRegCD: OperatorCallback;\n\tLoadRegCE: OperatorCallback;\n\tLoadRegCH: OperatorCallback;\n\tLoadRegCL: OperatorCallback;\n\tLoadRegDA: OperatorCallback;\n\tLoadRegDB: OperatorCallback;\n\tLoadRegDC: OperatorCallback;\n\tLoadRegDD: OperatorCallback;\n\tLoadRegDE: OperatorCallback;\n\tLoadRegDH: OperatorCallback;\n\tLoadRegDL: OperatorCallback;\n\tLoadRegEA: OperatorCallback;\n\tLoadRegEB: OperatorCallback;\n\tLoadRegEC: OperatorCallback;\n\tLoadRegED: OperatorCallback;\n\tLoadRegEE: OperatorCallback;\n\tLoadRegEH: OperatorCallback;\n\tLoadRegEL: OperatorCallback;\n\tLoadRegHA: OperatorCallback;\n\tLoadRegHB: OperatorCallback;\n\tLoadRegHC: OperatorCallback;\n\tLoadRegHD: OperatorCallback;\n\tLoadRegHE: OperatorCallback;\n\tLoadRegHH: OperatorCallback;\n\tLoadRegHL: OperatorCallback;\n\tLoadRegLA: OperatorCallback;\n\tLoadRegLB: OperatorCallback;\n\tLoadRegLC: OperatorCallback;\n\tLoadRegLD: OperatorCallback;\n\tLoadRegLE: OperatorCallback;\n\tLoadRegLH: OperatorCallback;\n\tLoadRegLL: OperatorCallback;\n}\n\nexport const RegisterToRegisterOperators: RegisterToRegisterOperatorSet = {\n\tLoadRegAA: hardware => writeToRegister('a', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegAB: hardware => writeToRegister('a', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegAC: hardware => writeToRegister('a', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegAD: hardware => writeToRegister('a', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegAE: hardware => writeToRegister('a', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegAH: hardware => writeToRegister('a', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegAL: hardware => writeToRegister('a', hardware.cpu.registers.l, hardware.cpu.registers),\n\tLoadRegBA: hardware => writeToRegister('b', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegBB: hardware => writeToRegister('b', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegBC: hardware => writeToRegister('b', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegBD: hardware => writeToRegister('b', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegBE: hardware => writeToRegister('b', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegBH: hardware => writeToRegister('b', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegBL: hardware => writeToRegister('b', hardware.cpu.registers.l, hardware.cpu.registers),\n\tLoadRegCA: hardware => writeToRegister('c', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegCB: hardware => writeToRegister('c', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegCC: hardware => writeToRegister('c', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegCD: hardware => writeToRegister('c', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegCE: hardware => writeToRegister('c', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegCH: hardware => writeToRegister('c', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegCL: hardware => writeToRegister('c', hardware.cpu.registers.l, hardware.cpu.registers),\n\tLoadRegDA: hardware => writeToRegister('d', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegDB: hardware => writeToRegister('d', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegDC: hardware => writeToRegister('d', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegDD: hardware => writeToRegister('d', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegDE: hardware => writeToRegister('d', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegDH: hardware => writeToRegister('d', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegDL: hardware => writeToRegister('d', hardware.cpu.registers.l, hardware.cpu.registers),\n\tLoadRegEA: hardware => writeToRegister('e', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegEB: hardware => writeToRegister('e', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegEC: hardware => writeToRegister('e', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegED: hardware => writeToRegister('e', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegEE: hardware => writeToRegister('e', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegEH: hardware => writeToRegister('e', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegEL: hardware => writeToRegister('e', hardware.cpu.registers.l, hardware.cpu.registers),\n\tLoadRegHA: hardware => writeToRegister('h', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegHB: hardware => writeToRegister('h', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegHC: hardware => writeToRegister('h', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegHD: hardware => writeToRegister('h', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegHE: hardware => writeToRegister('h', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegHH: hardware => writeToRegister('h', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegHL: hardware => writeToRegister('h', hardware.cpu.registers.l, hardware.cpu.registers),\n\tLoadRegLA: hardware => writeToRegister('l', hardware.cpu.registers.a, hardware.cpu.registers),\n\tLoadRegLB: hardware => writeToRegister('l', hardware.cpu.registers.b, hardware.cpu.registers),\n\tLoadRegLC: hardware => writeToRegister('l', hardware.cpu.registers.c, hardware.cpu.registers),\n\tLoadRegLD: hardware => writeToRegister('l', hardware.cpu.registers.d, hardware.cpu.registers),\n\tLoadRegLE: hardware => writeToRegister('l', hardware.cpu.registers.e, hardware.cpu.registers),\n\tLoadRegLH: hardware => writeToRegister('l', hardware.cpu.registers.h, hardware.cpu.registers),\n\tLoadRegLL: hardware => writeToRegister('l', hardware.cpu.registers.l, hardware.cpu.registers),\n};","import {RegisterKey, RegisterSetInterface} from '../../Registers';\nimport {OperatorCallback, OperatorSet} from '../index';\n\nconst swap = (register: RegisterKey, registers: RegisterSetInterface) => {\n\tconst value = registers[register];\n\n\tregisters[register] = ((value & 0xF) << 4) | ((value & 0xF0) >> 4);\n};\n\nexport interface SwapOperatorSet extends OperatorSet {\n\tSwapNibblesA: OperatorCallback;\n\tSwapNibblesB: OperatorCallback;\n\tSwapNibblesC: OperatorCallback;\n\tSwapNibblesD: OperatorCallback;\n\tSwapNibblesE: OperatorCallback;\n\tSwapNibblesH: OperatorCallback;\n\tSwapNibblesL: OperatorCallback;\n}\n\nexport const SwapOperators: SwapOperatorSet = {\n\tSwapNibblesA: hardware => swap('a', hardware.cpu.registers),\n\tSwapNibblesB: hardware => swap('b', hardware.cpu.registers),\n\tSwapNibblesC: hardware => swap('c', hardware.cpu.registers),\n\tSwapNibblesD: hardware => swap('d', hardware.cpu.registers),\n\tSwapNibblesE: hardware => swap('e', hardware.cpu.registers),\n\tSwapNibblesH: hardware => swap('h', hardware.cpu.registers),\n\tSwapNibblesL: hardware => swap('l', hardware.cpu.registers),\n};","import {HardwareBusInterface} from '../../Hardware';\nimport {OperatorCallback, OperatorSet, testCarry, testZero} from './index';\n\nconst returnIf = (test: boolean, hardware: HardwareBusInterface) => {\n\tconst {memory, registers} = hardware;\n\n\tregisters.m = 1;\n\n\tif (test) {\n\t\tregisters.programCount = memory.readWord(registers.stackPointer);\n\t\tregisters.stackPointer += 2;\n\n\t\tregisters.m += 2;\n\t}\n};\n\nexport interface ReturnOperatorSet extends OperatorSet {\n\tReturn: OperatorCallback;\n\tReturnIfCarry: OperatorCallback;\n\tReturnIfNotCarry: OperatorCallback;\n\tReturnIfZero: OperatorCallback;\n\tReturnIfNotZero: OperatorCallback;\n}\n\nexport const ReturnOperators: ReturnOperatorSet = {\n\tReturn: hardware => returnIf(true, hardware),\n\tReturnIfCarry: hardware => returnIf(testCarry(hardware), hardware),\n\tReturnIfNotCarry: hardware => returnIf(!testCarry(hardware), hardware),\n\tReturnIfZero: hardware => returnIf(testZero(hardware), hardware),\n\tReturnIfNotZero: hardware => returnIf(!testZero(hardware), hardware),\n};","import {HardwareBusInterface} from '../../Hardware';\nimport {RegisterKey} from '../Registers';\nimport {OperatorCallback, OperatorSet} from './index';\n\nconst push = (highReg: RegisterKey, lowReg: RegisterKey, hardware: HardwareBusInterface) => {\n\tconst {memory, registers} = hardware;\n\n\tmemory.writeByte(--registers.stackPointer, registers[highReg]);\n\tmemory.writeByte(--registers.stackPointer, registers[lowReg]);\n\n\tregisters.m = 3;\n};\n\nconst pop = (highReg: RegisterKey, lowReg: RegisterKey, hardware: HardwareBusInterface) => {\n\tconst {memory, registers} = hardware;\n\n\tregisters[lowReg] = memory.readByte(registers.stackPointer++);\n\tregisters[highReg] = memory.readByte(registers.stackPointer++);\n\n\tregisters.m = 3;\n};\n\nexport interface StackOperatorSet extends OperatorSet {\n\tPushBC: OperatorCallback;\n\tPushDE: OperatorCallback;\n\tPushHL: OperatorCallback;\n\n\tPopBC: OperatorCallback;\n\tPopDE: OperatorCallback;\n\tPopHL: OperatorCallback;\n\tPopAF: OperatorCallback;\n}\n\nexport const StackOperators: StackOperatorSet = {\n\tPushBC: hardware => push('b', 'c', hardware),\n\tPushDE: hardware => push('d', 'e', hardware),\n\tPushHL: hardware => push('h', 'l', hardware),\n\n\tPopBC: hardware => pop('b', 'c', hardware),\n\tPopDE: hardware => pop('d', 'e', hardware),\n\tPopHL: hardware => pop('h', 'l', hardware),\n\tPopAF: hardware => pop('a', 'flags', hardware),\n};","import {HardwareBusInterface} from '../../Hardware';\nimport {RegisterFlag, RegisterSetInterface} from '../Registers';\nimport {OperatorCallback, OperatorSet} from './index';\n\nconst setFlags = (result: number, value: number, original: number, registers: RegisterSetInterface) => {\n\tregisters.flags = RegisterFlag.OPERATION;\n\n\tif (result < 0)\n\t\tregisters.flags |= RegisterFlag.CARRY;\n\n\tresult &= 255;\n\n\tif (!result)\n\t\tregisters.flags |= RegisterFlag.ZERO;\n\n\tif (result ^ value ^ original)\n\t\tregisters.flags |= RegisterFlag.HALF_CARRY;\n};\n\nconst finalize = (value: number, original: number, registers: RegisterSetInterface) => {\n\tsetFlags(registers.a, value, original, registers);\n\n\tregisters.a &= 255;\n};\n\nconst subtract = (value: number, registers: RegisterSetInterface) => {\n\tconst original = registers.a;\n\n\tregisters.a -= value;\n\n\tfinalize(value, original, registers);\n\n\tregisters.m = 1;\n};\n\nconst subtractAddress = (address: number, hardware: HardwareBusInterface) => {\n\tconst memory = hardware.memory;\n\tconst registers = hardware.cpu.registers;\n\n\tconst original = registers.a;\n\tconst value = memory.readByte(address);\n\n\tregisters.a -= value;\n\n\tfinalize(value, original, registers);\n\n\tregisters.m = 2;\n};\n\nconst subtractWithCarry = (value: number, registers: RegisterSetInterface) => {\n\tconst original = registers.a;\n\n\tregisters.a -= value;\n\tregisters.a -= registers.flags & RegisterFlag.CARRY ? 1 : 0;\n\n\tfinalize(value, original, registers);\n\n\tregisters.m = 1;\n};\n\nconst subtractAddressWithCarry = (address: number, hardware: HardwareBusInterface) => {\n\tconst registers = hardware.cpu.registers;\n\n\tconst original = registers.a;\n\tconst value = hardware.memory.readByte(address);\n\n\tregisters.a -= value;\n\tregisters.a -= registers.flags & RegisterFlag.CARRY ? 1 : 0;\n\n\tfinalize(value, original, registers);\n\n\tregisters.m = 2;\n};\n\nconst setSubtractFlags = (value: number, hardware: HardwareBusInterface) => {\n\tconst registers = hardware.cpu.registers;\n\tconst original = registers.a;\n\n\tsetFlags(original - value, value, original, registers);\n\n\tregisters.m = 1;\n};\n\nconst setSubtractAddressFlags = (address: number, hardware: HardwareBusInterface) => {\n\tconst registers = hardware.cpu.registers;\n\n\tconst original = registers.a;\n\tconst value = hardware.memory.readByte(address);\n\n\tsetFlags(original - value, value, original, registers);\n\n\tregisters.m = 2;\n};\n\nexport interface SubtractOperatorSet extends OperatorSet {\n\tSubtractA: OperatorCallback;\n\tSubtractB: OperatorCallback;\n\tSubtractC: OperatorCallback;\n\tSubtractD: OperatorCallback;\n\tSubtractE: OperatorCallback;\n\tSubtractH: OperatorCallback;\n\tSubtractL: OperatorCallback;\n\n\tSubtractHLAddress: OperatorCallback;\n\tSubtractPCAddress: OperatorCallback;\n\n\tSubtractAWithCarry: OperatorCallback;\n\tSubtractBWithCarry: OperatorCallback;\n\tSubtractCWithCarry: OperatorCallback;\n\tSubtractDWithCarry: OperatorCallback;\n\tSubtractEWithCarry: OperatorCallback;\n\tSubtractHWithCarry: OperatorCallback;\n\tSubtractLWithCarry: OperatorCallback;\n\n\tSubtractHLAddressWithCarry: OperatorCallback;\n\tSubtractPCAddressWithCarry: OperatorCallback;\n\n\tSetSubtractAFlags: OperatorCallback;\n\tSetSubtractBFlags: OperatorCallback;\n\tSetSubtractCFlags: OperatorCallback;\n\tSetSubtractDFlags: OperatorCallback;\n\tSetSubtractEFlags: OperatorCallback;\n\tSetSubtractHFlags: OperatorCallback;\n\tSetSubtractLFlags: OperatorCallback;\n\n\tSetSubtractHLAddressFlags: OperatorCallback;\n\tSetSubtractPCAddressFlags: OperatorCallback;\n}\n\nexport const SubtractOperators: SubtractOperatorSet = {\n\tSubtractA: hardware => subtract(hardware.cpu.registers.a, hardware.cpu.registers),\n\tSubtractB: hardware => subtract(hardware.cpu.registers.b, hardware.cpu.registers),\n\tSubtractC: hardware => subtract(hardware.cpu.registers.c, hardware.cpu.registers),\n\tSubtractD: hardware => subtract(hardware.cpu.registers.d, hardware.cpu.registers),\n\tSubtractE: hardware => subtract(hardware.cpu.registers.e, hardware.cpu.registers),\n\tSubtractH: hardware => subtract(hardware.cpu.registers.h, hardware.cpu.registers),\n\tSubtractL: hardware => subtract(hardware.cpu.registers.l, hardware.cpu.registers),\n\n\tSubtractHLAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tsubtractAddress((registers.h << 8) + registers.l, hardware);\n\t},\n\tSubtractPCAddress: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tsubtractAddress(registers.programCount++, hardware);\n\t},\n\n\tSubtractAWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.a, hardware.cpu.registers),\n\tSubtractBWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.b, hardware.cpu.registers),\n\tSubtractCWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.c, hardware.cpu.registers),\n\tSubtractDWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.d, hardware.cpu.registers),\n\tSubtractEWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.e, hardware.cpu.registers),\n\tSubtractHWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.h, hardware.cpu.registers),\n\tSubtractLWithCarry: hardware => subtractWithCarry(hardware.cpu.registers.l, hardware.cpu.registers),\n\n\tSubtractHLAddressWithCarry: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tsubtractAddressWithCarry((registers.h << 8) + registers.l, hardware);\n\t},\n\tSubtractPCAddressWithCarry: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tsubtractAddressWithCarry(registers.programCount++, hardware);\n\t},\n\n\tSetSubtractAFlags: hardware => setSubtractFlags(hardware.cpu.registers.a, hardware),\n\tSetSubtractBFlags: hardware => setSubtractFlags(hardware.cpu.registers.b, hardware),\n\tSetSubtractCFlags: hardware => setSubtractFlags(hardware.cpu.registers.c, hardware),\n\tSetSubtractDFlags: hardware => setSubtractFlags(hardware.cpu.registers.d, hardware),\n\tSetSubtractEFlags: hardware => setSubtractFlags(hardware.cpu.registers.e, hardware),\n\tSetSubtractHFlags: hardware => setSubtractFlags(hardware.cpu.registers.h, hardware),\n\tSetSubtractLFlags: hardware => setSubtractFlags(hardware.cpu.registers.l, hardware),\n\n\tSetSubtractHLAddressFlags: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tsetSubtractAddressFlags((registers.h << 8) + registers.l, hardware);\n\t},\n\tSetSubtractPCAddressFlags: hardware => {\n\t\tconst registers = hardware.cpu.registers;\n\n\t\tsetSubtractAddressFlags(registers.programCount++, hardware);\n\t},\n};","import {HardwareBusInterface} from '../../Hardware';\nimport {RegisterFlag} from '../Registers';\n\nexport type OperatorCallback = (hardware: HardwareBusInterface) => void;\n\nexport interface OperatorSet {\n\t[key: string]: OperatorCallback;\n}\n\nexport const testMask = (value: number, mask: number) => (value & mask) !== 0;\nexport const testZero = (hardware: HardwareBusInterface) => testMask(hardware.registers.flags, RegisterFlag.ZERO);\nexport const testCarry = (hardware: HardwareBusInterface) => testMask(hardware.registers.flags, RegisterFlag.CARRY);","import {CompoundOperatorSet} from '../index';\nimport {OperatorCallback} from './index';\n\nexport const toOpcodeMap = (operators: CompoundOperatorSet): OperatorCallback[] => [\n\t// 0x00\n\toperators.Noop, operators.LoadPCAndNextIntoBC, operators.LoadAIntoBCAddress, operators.IncrementBC,\n\toperators.IncrementB, operators.DecrementB, operators.LoadPCToB_Advance, operators.RotateLeftAWithCarry,\n\toperators.LoadPCAndNextIntoSP, operators.AddBCToHL, operators.LoadBCAddressIntoA, operators.DecrementBC,\n\toperators.IncrementC, operators.DecrementC, operators.LoadPCToC_Advance, operators.RotateRightAWithCarry,\n\n\t// 0x10\n\toperators.RelativeJumpToPCAddressDecrementB, operators.LoadPCAndNextIntoDE, operators.LoadDEAddressIntoA, operators.IncrementDE,\n\toperators.IncrementD, operators.DecrementH, operators.LoadPCToD_Advance, operators.RotateLeftA,\n\toperators.RelativeJumpToPCAddress, operators.AddDEToHL, operators.LoadDEAddressIntoA, operators.DecrementDE,\n\toperators.IncrementE, operators.DecrementE, operators.LoadPCToE_Advance, operators.RotateRightA,\n\n\t// 0x20\n\toperators.RelativeJumpToPCAddressIfNotZero, operators.LoadPCAndNextIntoHL, operators.LoadAIntoHLAddressAndIncrement, operators.IncrementHL,\n\toperators.IncrementH, operators.DecrementH, operators.LoadPCToH_Advance, operators.BCDCorrect,\n\toperators.RelativeJumpToPCAddressIfZero, operators.AddHLToHL, operators.LoadHLAddressIntoAAndIncrement, operators.DecrementHL,\n\toperators.IncrementL, operators.DecrementL, operators.LoadPCToL_Advance, operators.InvertA,\n\n\t// 0x30\n\toperators.RelativeJumpToPCAddressIfNotCarry, operators.LoadPCAndNextIntoSP, operators.LoadAIntoHLAddressAndDecrement, operators.IncrementSP,\n\toperators.IncrementHLAddress, operators.DecrementHLAddress, operators.LoadPCIntoHLAddress, operators.SetCarryFlag,\n\toperators.RelativeJumpToPCAddressIfCarry, operators.AddSPToHL, operators.LoadHLAddressIntoAAndDecrement, operators.DecrementSP,\n\toperators.IncrementA, operators.DecrementA, operators.LoadPCToA_Advance, operators.InvertCarryFlag,\n\n\t// 0x40\n\toperators.LoadRegBB, operators.LoadRegBC, operators.LoadRegBD, operators.LoadRegBE,\n\toperators.LoadRegBH, operators.LoadRegBL, operators.LoadHLAddressIntoB, operators.LoadRegBA,\n\toperators.LoadRegCB, operators.LoadRegCC, operators.LoadRegCD, operators.LoadRegCE,\n\toperators.LoadRegCH, operators.LoadRegCL, operators.LoadHLAddressIntoC, operators.LoadRegCA,\n\n\t// 0x50\n\toperators.LoadRegDB, operators.LoadRegDC, operators.LoadRegDD, operators.LoadRegDE,\n\toperators.LoadRegDH, operators.LoadRegDL, operators.LoadHLAddressIntoD, operators.LoadRegDA,\n\toperators.LoadRegEB, operators.LoadRegEC, operators.LoadRegED, operators.LoadRegEE,\n\toperators.LoadRegEH, operators.LoadRegEL, operators.LoadHLAddressIntoE, operators.LoadRegEA,\n\n\t// 0x60\n\toperators.LoadRegHB, operators.LoadRegHC, operators.LoadRegHD, operators.LoadRegHE,\n\toperators.LoadRegHH, operators.LoadRegHL, operators.LoadHLAddressIntoH, operators.LoadRegHA,\n\toperators.LoadRegLB, operators.LoadRegLC, operators.LoadRegLD, operators.LoadRegLE,\n\toperators.LoadRegLH, operators.LoadRegLL, operators.LoadHLAddressIntoL, operators.LoadRegLA,\n\n\t// 0x70\n\toperators.LoadBIntoHLAddress, operators.LoadCIntoHLAddress, operators.LoadDIntoHLAddress, operators.LoadEIntoHLAddress,\n\toperators.LoadHIntoHLAddress, operators.LoadLIntoHLAddress, operators.Halt, operators.LoadAIntoHLAddress,\n\toperators.LoadRegAB, operators.LoadRegAC, operators.LoadRegAD, operators.LoadRegAE,\n\toperators.LoadRegAH, operators.LoadRegAL, operators.LoadHLAddressIntoA, operators.LoadRegAA,\n\n\t// 0x80\n\toperators.AddB, operators.AddC, operators.AddD, operators.AddE,\n\toperators.AddH, operators.AddL, operators.AddHLAddress, operators.AddA,\n\toperators.AddBWithCarry, operators.AddCWithCarry, operators.AddDWithCarry, operators.AddEWithCarry,\n\toperators.AddHWithCarry, operators.AddLWithCarry, operators.AddHLAddressWithCarry, operators.AddAWithCarry,\n\n\t// 0x90\n\toperators.SubtractB, operators.SubtractC, operators.SubtractD, operators.SubtractE,\n\toperators.SubtractH, operators.SubtractL, operators.SubtractHLAddress, operators.SubtractA,\n\toperators.SubtractBWithCarry, operators.SubtractCWithCarry, operators.SubtractDWithCarry, operators.SubtractEWithCarry,\n\toperators.SubtractHWithCarry, operators.SubtractLWithCarry, operators.SubtractHLAddressWithCarry, operators.SubtractAWithCarry,\n\n\t// 0xA0\n\toperators.BitAndB, operators.BitAndC, operators.BitAndD, operators.BitAndE,\n\toperators.BitAndH, operators.BitAndL, operators.BitAndHLAddress, operators.BitAndA,\n\toperators.BitXorB, operators.BitXorC, operators.BitXorD, operators.BitXorE,\n\toperators.BitXorH, operators.BitXorL, operators.BitXorHLAddress, operators.BitXorA,\n\n\t// 0xB0\n\toperators.BitOrB, operators.BitOrC, operators.BitOrD, operators.BitOrD,\n\toperators.BitOrH, operators.BitOrL, operators.BitOrHLAddress, operators.BitOrA,\n\toperators.SetSubtractBFlags, operators.SetSubtractCFlags, operators.SetSubtractDFlags, operators.SetSubtractEFlags,\n\toperators.SetSubtractHFlags, operators.SetSubtractLFlags, operators.SetSubtractHLAddressFlags, operators.SetSubtractAFlags,\n\n\t// 0xC0\n\toperators.ReturnIfNotZero, operators.PopBC, operators.AbsoluteJumpToPCAddressIfNotZero, operators.AbsoluteJumpToPCAddress,\n\toperators.LabelJumpPCAddressIfNotZero, operators.PushBC, operators.AddPCAddress, operators.Interrupt00,\n\toperators.ReturnIfZero, operators.Return, operators.AbsoluteJumpToPCAddressIfZero, operators.ExtraOperators,\n\toperators.LabelJumpPCAddressIfZero, operators.LabelJumpPCAddress, operators.AddPCAddressWithCarry, operators.Interrupt08,\n\n\t// 0xD0\n\toperators.ReturnIfNotCarry, operators.PopDE, operators.AbsoluteJumpToPCAddressIfNotCarry, operators.NoImpl,\n\toperators.LabelJumpPCAddressIfNotCarry, operators.PishDE, operators.SubtractPCAddress, operators.Interrupt10,\n\toperators.ReturnIfCarry, operators.InterruptReturn, operators.AbsoluteJumpToPCAddressIfCarry, operators.NoImpl,\n\toperators.LabelJumpPCAddressIfCarry, operators.NoImpl, operators.SubtractPCAddressWithCarry, operators.Interrupt18,\n\n\t// 0xE0\n\toperators.LoadAIntoPCWithMagicAddress, operators.PopHL, operators.LoadAIntoCWithMagicAddress, operators.NoImpl,\n\toperators.NoImpl, operators.PushHL, operators.BitAndPCAddress, operators.Interrupt20,\n\toperators.AddPCAddressToSP, operators.AbsoluteJumpToHLAddress, operators.LoadAIntoPCAddress, operators.NoImpl,\n\toperators.NoImpl, operators.NoImpl, operators.BitXorPCAddress, operators.Interrupt28,\n\n\t// 0xF0\n\toperators.LoadPCWithMagicIntoA, operators.PopAF, operators.LoadCWithMagicAddressIntoA, operators.InterruptDisable,\n\toperators.NoImpl, operators.PushAF, operators.BitOrPCAddress, operators.Interrupt30,\n\toperators.SomeCrazyShitWithHLAndSP, operators.NoImpl, operators.LoadPCWordIntoA, operators.InterruptEnable,\n\toperators.NoImpl, operators.NoImpl, operators.SetSubtractPCAddressFlags, operators.Interrupt38,\n];\n\nexport const toCbcodeMap = (operators: CompoundOperatorSet): OperatorCallback[] => [\n\t// CB 0x00\n\toperators.RotateLeftBWithCarry, operators.RotateLeftCWithCarry, operators.RotateLeftDWithCarry, operators.RotateLeftEWithCarry,\n\toperators.RotateLeftHWithCarry, operators.RotateLeftLWithCarry, operators.RotateLeftHLAddressWithCarry, operators.RotateLeftHLAddressWithCarry,\n\toperators.RotateRightBWithCarry, operators.RotateRightCWithCarry, operators.RotateRightDWithCarry, operators.RotateRightEWithCarry,\n\toperators.RotateRightHLAddressWithCarry, operators.RotateRightLWithCarry, operators.RotateRightHLAddressWithCarry, operators.RotateRightAWithCarry,\n\n\t// CB 0x10\n\toperators.RotateLeftB, operators.RotateLeftC, operators.RotateLeftD, operators.RotateLeftE,\n\toperators.RotateLeftH, operators.RotateLeftL, operators.RotateLeftHLAddress, operators.RotateLeftA,\n\toperators.RotateRightB, operators.RotateRightC, operators.RotateRightD, operators.RotateRightE,\n\toperators.RotateRightH, operators.RotateRightL, operators.RotateRightHLAddress, operators.RotateRightA,\n\n\t// CB 0x20\n\toperators.ShiftLeftBArithmetic, operators.ShiftLeftCArithmetic, operators.ShiftLeftDArithmetic, operators.ShiftLeftEArithmetic,\n\toperators.ShiftLeftHArithmetic, operators.ShiftLeftLArithmetic, operators.NoImplExtra, operators.ShiftLeftAArithmetic,\n\toperators.ShiftRightBArithmetic, operators.ShiftRightCArithmetic, operators.ShiftRightDArithmetic, operators.ShiftRightEArithmetic,\n\toperators.ShiftRightHArithmetic, operators.ShiftRightLArithmetic, operators.NoImplExtra, operators.ShiftRightAArithmetic,\n\n\t// CB 0x30\n\toperators.SwapNibblesB, operators.SwapNibblesC, operators.SwapNibblesD, operators.SwapNibblesE,\n\toperators.SwapNibblesH, operators.SwapNibblesL, operators.NoImplExtra, operators.SwapNibblesA,\n\toperators.ShiftRightBLogical, operators.ShiftRightCLogical, operators.ShiftRightDLogical, operators.ShiftRightELogical,\n\toperators.ShiftRightHLogical, operators.ShiftRightLLogical, operators.NoImplExtra, operators.ShiftRightALogical,\n\n\t// CB 0x40\n\toperators.TestBBit0, operators.TestCBit0, operators.TestDBit0, operators.TestEBit0,\n\toperators.TestHBit0, operators.TestLBit0, operators.TestHLAddressBit0, operators.TestABit0,\n\toperators.TestBBit1, operators.TestCBit1, operators.TestDBit1, operators.TestEBit1,\n\toperators.TestHBit1, operators.TestLBit1, operators.TestHLAddressBit1, operators.TestABit1,\n\n\t// CB 0x50\n\toperators.TestBBit2, operators.TestCBit2, operators.TestDBit2, operators.TestEBit2,\n\toperators.TestHBit2, operators.TestLBit2, operators.TestHLAddressBit2, operators.TestABit2,\n\toperators.TestBBit3, operators.TestCBit3, operators.TestDBit3, operators.TestEBit3,\n\toperators.TestHBit3, operators.TestLBit3, operators.TestHLAddressBit3, operators.TestABit3,\n\n\t// CB 0x60\n\toperators.TestBBit4, operators.TestCBit4, operators.TestDBit4, operators.TestEBit4,\n\toperators.TestHBit4, operators.TestLBit4, operators.TestHLAddressBit4, operators.TestABit4,\n\toperators.TestBBit5, operators.TestCBit5, operators.TestDBit5, operators.TestEBit5,\n\toperators.TestHBit5, operators.TestLBit5, operators.TestHLAddressBit5, operators.TestABit5,\n\n\t// CB 0x70\n\toperators.TestBBit6, operators.TestCBit6, operators.TestDBit6, operators.TestEBit6,\n\toperators.TestHBit6, operators.TestLBit6, operators.TestHLAddressBit6, operators.TestABit6,\n\toperators.TestBBit7, operators.TestCBit7, operators.TestDBit7, operators.TestEBit7,\n\toperators.TestHBit7, operators.TestLBit7, operators.TestHLAddressBit7, operators.TestABit7,\n\n\t// CB 0x80\n\toperators.ResetBBit0, operators.ResetCBit0, operators.ResetDBit0, operators.ResetEBit0,\n\toperators.ResetHBit0, operators.ResetLBit0, operators.ResetHLAddressBit0, operators.ResetABit0,\n\toperators.ResetBBit1, operators.ResetCBit1, operators.ResetDBit1, operators.ResetEBit1,\n\toperators.ResetHBit1, operators.ResetLBit1, operators.ResetHLAddressBit1, operators.ResetABit1,\n\n\t// CB 0x90\n\toperators.ResetBBit2, operators.ResetCBit2, operators.ResetDBit2, operators.ResetEBit2,\n\toperators.ResetHBit2, operators.ResetLBit2, operators.ResetHLAddressBit2, operators.ResetABit2,\n\toperators.ResetBBit3, operators.ResetCBit3, operators.ResetDBit3, operators.ResetEBit3,\n\toperators.ResetHBit3, operators.ResetLBit3, operators.ResetHLAddressBit3, operators.ResetABit3,\n\n\t// CB 0xA0\n\toperators.ResetBBit4, operators.ResetCBit4, operators.ResetDBit4, operators.ResetEBit4,\n\toperators.ResetHBit4, operators.ResetLBit4, operators.ResetHLAddressBit4, operators.ResetABit4,\n\toperators.ResetBBit5, operators.ResetCBit5, operators.ResetDBit5, operators.ResetEBit5,\n\toperators.ResetHBit5, operators.ResetLBit5, operators.ResetHLAddressBit5, operators.ResetABit5,\n\n\t// CB 0xB0\n\toperators.ResetBBit6, operators.ResetCBit6, operators.ResetDBit6, operators.ResetEBit6,\n\toperators.ResetHBit6, operators.ResetLBit6, operators.ResetHLAddressBit6, operators.ResetABit6,\n\toperators.ResetBBit7, operators.ResetCBit7, operators.ResetDBit7, operators.ResetEBit7,\n\toperators.ResetHBit7, operators.ResetLBit7, operators.ResetHLAddressBit7, operators.ResetABit7,\n\n\t// CB 0xC0\n\toperators.SetBBit0, operators.SetCBit0, operators.SetDBit0, operators.SetEBit0,\n\toperators.SetHBit0, operators.SetLBit0, operators.SetHLAddressBit0, operators.SetABit0,\n\toperators.SetBBit1, operators.SetCBit1, operators.SetDBit1, operators.SetEBit1,\n\toperators.SetHBit1, operators.SetLBit1, operators.SetHLAddressBit1, operators.SetABit1,\n\n\t// CB 0xD0\n\toperators.SetBBit2, operators.SetCBit2, operators.SetDBit2, operators.SetEBit2,\n\toperators.SetHBit2, operators.SetLBit2, operators.SetHLAddressBit2, operators.SetABit2,\n\toperators.SetBBit3, operators.SetCBit3, operators.SetDBit3, operators.SetEBit3,\n\toperators.SetHBit3, operators.SetLBit3, operators.SetHLAddressBit3, operators.SetABit3,\n\n\t// CB 0xE0\n\toperators.SetBBit4, operators.SetCBit4, operators.SetDBit4, operators.SetEBit4,\n\toperators.SetHBit4, operators.SetLBit4, operators.SetHLAddressBit4, operators.SetABit4,\n\toperators.SetBBit5, operators.SetCBit5, operators.SetDBit5, operators.SetEBit5,\n\toperators.SetHBit5, operators.SetLBit5, operators.SetHLAddressBit5, operators.SetABit5,\n\n\t// CB 0xF0\n\toperators.SetBBit6, operators.SetCBit6, operators.SetDBit6, operators.SetEBit6,\n\toperators.SetHBit6, operators.SetLBit6, operators.SetHLAddressBit6, operators.SetABit6,\n\toperators.SetBBit7, operators.SetCBit7, operators.SetDBit7, operators.SetEBit7,\n\toperators.SetHBit7, operators.SetLBit7, operators.SetHLAddressBit7, operators.SetABit7,\n];","import {Clock, ClockInterface} from './Clock';\n\nexport type RegisterKey = 'a' | 'b' | 'c' | 'd' | 'e' | 'h' | 'l' | 'flags' | 'stackPointer' | 'programCount' | 'm' | 't';\n\nexport interface RegisterSetInterface {\n\ta: number;\n\tb: number;\n\tc: number;\n\td: number;\n\te: number;\n\th: number;\n\tl: number;\n\n\tflags: number;\n\n\tstackPointer: number;\n\tprogramCount: number;\n\n\tm: number;\n\tt: number;\n\n\treset(): void;\n}\n\nexport enum RegisterFlag {\n\tCARRY = 0x10,\n\tHALF_CARRY = 0x20,\n\tOPERATION = 0x40,\n\tZERO = 0x80,\n}\n\nexport class RegisterSet implements RegisterSetInterface {\n\tpublic a: number;\n\tpublic b: number;\n\tpublic c: number;\n\tpublic d: number;\n\tpublic e: number;\n\tpublic h: number;\n\tpublic l: number;\n\n\tpublic flags: number;\n\n\tpublic stackPointer: number;\n\tpublic programCount: number;\n\n\tprivate clock: ClockInterface;\n\n\tpublic constructor(clock?: ClockInterface) {\n\t\tthis.clock = clock || new Clock();\n\n\t\tthis.reset();\n\t}\n\n\tpublic reset(): void {\n\t\tthis.a = 0;\n\t\tthis.b = 0;\n\t\tthis.c = 0;\n\t\tthis.d = 0;\n\t\tthis.e = 0;\n\t\tthis.h = 0;\n\t\tthis.l = 0;\n\n\t\tthis.flags = 0;\n\n\t\tthis.stackPointer = 0;\n\t\tthis.programCount = 0;\n\n\t\tthis.clock.reset();\n\t}\n\n\tget m() {\n\t\treturn this.clock.m;\n\t}\n\n\tset m(value: number) {\n\t\tthis.clock.m = value;\n\t}\n\n\tget t() {\n\t\treturn this.clock.t;\n\t}\n\n\tset t(value: number) {\n\t\tthis.clock.t = value;\n\t}\n}","import {HardwareBusAwareInterface, HardwareBusInterface} from '../Hardware';\nimport {Clock, ClockInterface} from './Clock';\nimport {AddOperators, AddOperatorSet} from './Operations/Add';\nimport {BitManipulationOperators, BitManipulationOperatorSet} from './Operations/BitManipulation';\nimport {BitwiseOperators, BitwiseOperatorSet} from './Operations/Bitwise';\nimport {CompareOperators, CompareOperatorSet} from './Operations/Compare';\nimport {DecrementOperators, DecrementOperatorSet} from './Operations/Decrement';\nimport {ExtraOperators, ExtraOperatorSet} from './Operations/Extra';\nimport {IncrementOperators, IncrementOperatorSet} from './Operations/Increment';\nimport {OperatorCallback, OperatorSet} from './Operations/index';\nimport {Interrupt, InterruptOperators, InterruptOperatorSet} from './Operations/Interrupt';\nimport {JumpOperators, JumpOperatorSet} from './Operations/Jump';\nimport {LoadStoreOperators, LoadStoreOperatorSet} from './Operations/LoadStore';\nimport {toCbcodeMap, toOpcodeMap} from './Operations/mappings';\nimport {ReturnOperators, ReturnOperatorSet} from './Operations/Return';\nimport {StackOperators, StackOperatorSet} from './Operations/Stack';\nimport {SubtractOperators, SubtractOperatorSet} from './Operations/Subtract';\nimport {RegisterSet, RegisterSetInterface} from './Registers';\n\nexport interface CompoundOperatorSet extends OperatorSet,\n\tAddOperatorSet,\n\tBitManipulationOperatorSet,\n\tBitwiseOperatorSet,\n\tCompareOperatorSet,\n\tDecrementOperatorSet,\n\tExtraOperatorSet,\n\tIncrementOperatorSet,\n\tInterruptOperatorSet,\n\tJumpOperatorSet,\n\tLoadStoreOperatorSet,\n\tReturnOperatorSet,\n\tStackOperatorSet,\n\tSubtractOperatorSet {\n}\n\nexport interface CpuInterface {\n\tclock: ClockInterface;\n\tregisters: RegisterSetInterface;\n\toperators: CompoundOperatorSet;\n\topcodes: OperatorCallback[];\n\tcbcodes: OperatorCallback[];\n\n\tallowInterrupts: boolean;\n\n\thalt: boolean;\n\tstop: boolean;\n\n\tstep(): void;\n\texec(): void;\n\treset(): void;\n}\n\nexport class Cpu implements CpuInterface, HardwareBusAwareInterface {\n\tpublic clock: ClockInterface;\n\tpublic registers: RegisterSetInterface;\n\tpublic operators: CompoundOperatorSet;\n\tpublic opcodes: OperatorCallback[];\n\tpublic cbcodes: OperatorCallback[];\n\n\tpublic halt: boolean = false;\n\tpublic stop: boolean = false;\n\tpublic allowInterrupts: boolean = true;\n\n\tprivate interruptMap: {[key: number]: OperatorCallback};\n\n\tprivate hardware: HardwareBusInterface = null;\n\tprivate tickIntervalId: number = null;\n\n\tpublic constructor() {\n\t\tthis.clock = new Clock();\n\t\tthis.registers = new RegisterSet();\n\t\tthis.operators = {\n\t\t\t...AddOperators,\n\t\t\t...BitManipulationOperators,\n\t\t\t...BitwiseOperators,\n\t\t\t...CompareOperators,\n\t\t\t...DecrementOperators,\n\t\t\t...ExtraOperators,\n\t\t\t...IncrementOperators,\n\t\t\t...InterruptOperators,\n\t\t\t...JumpOperators,\n\t\t\t...LoadStoreOperators,\n\t\t\t...ReturnOperators,\n\t\t\t...StackOperators,\n\t\t\t...SubtractOperators,\n\t\t};\n\n\t\tthis.interruptMap = {\n\t\t\t[Interrupt.VBLANK]: this.operators.Interrupt40,\n\t\t\t[Interrupt.LCD_STAT]: this.operators.Interrupt48,\n\t\t\t[Interrupt.TIMER]: this.operators.Interrupt50,\n\t\t\t[Interrupt.SERIAL]: this.operators.Interrupt58,\n\t\t\t[Interrupt.JOYPAD]: this.operators.Interrupt60,\n\t\t};\n\n\t\tthis.opcodes = toOpcodeMap(this.operators);\n\t\tthis.cbcodes = toCbcodeMap(this.operators);\n\t}\n\n\tpublic setHardwareBus(hardware: HardwareBusInterface): void {\n\t\tthis.hardware = hardware;\n\t}\n\n\tpublic step(): void {\n\t\tconst op = this.hardware.memory.readByte(this.registers.programCount++);\n\n\t\tthis.opcodes[op](this.hardware);\n\n\t\tthis.registers.programCount &= 65535;\n\t\tthis.clock.m += this.registers.m;\n\n\t\tthis.hardware.gpu.step();\n\n\t\tconst memory = this.hardware.memory;\n\n\t\tif (this.allowInterrupts && memory.interruptsEnabled && memory.interruptFlags) {\n\t\t\tthis.halt = false;\n\t\t\tthis.allowInterrupts = false;\n\n\t\t\tconst interrupts = memory.interruptsEnabled & memory.interruptFlags;\n\n\t\t\tlet fired = false;\n\n\t\t\tfor (let key in this.interruptMap) {\n\t\t\t\tconst mask = parseInt(key, 10);\n\n\t\t\t\tif (interrupts & mask) {\n\t\t\t\t\tfired = true;\n\t\t\t\t\tmemory.interruptFlags ^= mask;\n\n\t\t\t\t\tthis.interruptMap[key](this.hardware);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!fired)\n\t\t\t\tthis.allowInterrupts = true;\n\t\t}\n\t}\n\n\tpublic exec(): void {\n\t\tthis.halt = false;\n\t\tthis.stop = false;\n\n\t\tthis.tickIntervalId = setInterval(() => {\n\t\t\tconst frameClock = this.clock.m + 17556;\n\n\t\t\tdo {\n\t\t\t\tthis.step();\n\n\t\t\t\tif (this.halt || this.stop) {\n\t\t\t\t\tclearInterval(this.tickIntervalId);\n\n\t\t\t\t\tthis.tickIntervalId = null;\n\t\t\t\t}\n\t\t\t} while (this.clock.m < frameClock);\n\t\t}, 1);\n\t}\n\n\tpublic reset(): void {\n\t\tthis.clock.reset();\n\t\tthis.registers.reset();\n\n\t\tthis.halt = true;\n\t\tthis.stop = false;\n\t}\n}","export type ColorData = [number, number, number, number];\n\nexport class Color {\n\tpublic readonly data: ColorData;\n\n\tpublic constructor(data: ColorData) {\n\t\tthis.data = data;\n\t}\n\n\tpublic get r(): number {\n\t\treturn this.data[0];\n\t}\n\n\tpublic set r(value: number) {\n\t\tthis.data[0] = value;\n\t}\n\n\tpublic get g(): number {\n\t\treturn this.data[1];\n\t}\n\n\tpublic set g(value: number) {\n\t\tthis.data[1] = value;\n\t}\n\n\tpublic get b(): number {\n\t\treturn this.data[2];\n\t}\n\n\tpublic set b(value: number) {\n\t\tthis.data[2] = value;\n\t}\n\n\tpublic get a(): number {\n\t\treturn this.data[3];\n\t}\n\n\tpublic set a(value: number) {\n\t\tthis.data[3] = value;\n\t}\n\n\tpublic static fromRGB(r: number, g: number, b: number, a: number): Color {\n\t\treturn new Color([r, g, b, a]);\n\t}\n}\n\nexport class Palette {\n\tprivate colors: Color[];\n\n\tpublic constructor() {\n\t\tthis.reset();\n\t}\n\n\tpublic get(index: number): Color {\n\t\tif (index < 0 || index > this.colors.length)\n\t\t\tthrow new Error(`Invalid palette index: ${index}`);\n\n\t\treturn this.colors[index];\n\t}\n\n\tpublic reset(): void {\n\t\tthis.colors = [\n\t\t\tColor.fromRGB(255, 255, 255, 255),\n\t\t\tColor.fromRGB(192, 192, 192, 255),\n\t\t\tColor.fromRGB(96, 96, 96, 255),\n\t\t\tColor.fromRGB(0, 0, 0, 255),\n\t\t];\n\t}\n}","import {HardwareBusAwareInterface, HardwareBusInterface} from '../Hardware';\nimport {Palette} from './Color';\n\nexport interface GpuInterface {\n\tvram: Int16Array;\n\toam: Int16Array;\n\n\tupdateTile(address: number, value: number): void;\n\tupdateOAM(address: number, value: number): void;\n\tstep(): void;\n\treset(): void;\n\n\treadByte(address: number): number;\n\twriteByte(address: number, value: number): void;\n}\n\n/**\n * OAM_READ: 80 ticks\n * VRAM_READ: 172 ticks\n * HBLANK: 204 ticks\n *\n * Full line = OAM_READ + VRAM_READ + HBLANK = 456 ticks\n */\nexport enum RenderingMode {\n\tHBLANK,\n\tVBLANK,\n\tOAM_READ,\n\tVRAM_READ,\n}\n\nexport class Gpu implements GpuInterface, HardwareBusAwareInterface {\n\tpublic vram: Int16Array;\n\tpublic oam: Int16Array;\n\n\tprivate canvas: HTMLCanvasElement;\n\tprivate context: CanvasRenderingContext2D;\n\tprivate screen: ImageData;\n\tprivate tileset: number[][][];\n\tprivate palette: Palette;\n\n\tprivate scrollX: number = 0;\n\tprivate scrollY: number = 0;\n\tprivate bgMap = false;\n\tprivate bgTile = 0;\n\tprivate mode = RenderingMode.HBLANK;\n\tprivate modeClock = 0;\n\tprivate line = 0;\n\n\tprivate hardware: HardwareBusInterface = null;\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t\tthis.palette = new Palette();\n\n\t\tthis.reset();\n\t}\n\n\tpublic updateTile(address: number, value: number): void {\n\t\taddress &= 0x1FFE;\n\n\t\tconst tile = (address >> 4) & 511;\n\t\tconst y = (address >> 1) & 7;\n\n\t\tlet sx;\n\n\t\tfor (let x = 0; x < 8; x++) {\n\t\t\tsx = 1 << (7 - x);\n\n\t\t\tthis.tileset[tile][y][x] = (this.vram[address] & sx ? 1 : 0) | (this.vram[address + 1] & sx ? 2 : 0);\n\t\t}\n\t}\n\n\tpublic updateOAM(address: number, value: number): void {\n\n\t}\n\n\tpublic step(): void {\n\t\tthis.modeClock += this.hardware.cpu.registers.t;\n\n\t\tswitch (this.mode) {\n\t\t\tcase RenderingMode.OAM_READ:\n\t\t\t\tif (this.modeClock >= 80) {\n\t\t\t\t\tthis.modeClock = 0;\n\t\t\t\t\tthis.mode = RenderingMode.VRAM_READ;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RenderingMode.VRAM_READ:\n\t\t\t\tif (this.modeClock >= 172) {\n\t\t\t\t\tthis.modeClock = 0;\n\t\t\t\t\tthis.mode = RenderingMode.HBLANK;\n\n\t\t\t\t\tthis.render();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RenderingMode.HBLANK:\n\t\t\t\tif (this.modeClock >= 204) {\n\t\t\t\t\tthis.modeClock = 0;\n\n\t\t\t\t\tif (++this.line === 143) {\n\t\t\t\t\t\tthis.mode = RenderingMode.VBLANK;\n\n\t\t\t\t\t\tthis.context.putImageData(this.screen, 0, 0);\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis.mode = RenderingMode.OAM_READ;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RenderingMode.VBLANK:\n\t\t\t\tif (this.modeClock >= 456) {\n\t\t\t\t\tthis.modeClock = 0;\n\n\t\t\t\t\tif (++this.line > 153) {\n\t\t\t\t\t\tthis.mode = RenderingMode.OAM_READ;\n\t\t\t\t\t\tthis.line = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic reset(): void {\n\t\tthis.palette.reset();\n\n\t\tthis.vram = new Int16Array(1 << 13); // 8k\n\t\tthis.oam = new Int16Array(160);\n\n\t\tthis.context = this.canvas.getContext('2d');\n\t\tthis.screen = this.context.createImageData(160, 144);\n\n\t\tthis.context.putImageData(this.screen, 0, 0);\n\n\t\tthis.tileset = [];\n\n\t\tfor (let i = 0; i < 512; i++) {\n\t\t\tthis.tileset.push([]);\n\n\t\t\tfor (let j = 0; j < 8; j++)\n\t\t\t\tthis.tileset[i].push((new Array(8).fill(0)));\n\t\t}\n\t}\n\n\tpublic readByte(address: number): number {\n\t\tconsole.log(address - 0xFF40);\n\n\t\treturn 0;\n\t}\n\n\tpublic writeByte(address: number, value: number): void {\n\t\tconsole.log(address - 0xFF40);\n\t}\n\n\tpublic setHardwareBus(hardware: HardwareBusInterface): void {\n\t\tthis.hardware = hardware\n\t}\n\n\tprotected render(): void {\n\t\tlet mapOffset = this.bgMap ? 0x1C00 : 0x1800;\n\t\tmapOffset += ((this.line + this.scrollY) & 255) >> 3;\n\n\t\tlet lineOffset = this.scrollX >> 3;\n\n\t\tlet y = (this.line + this.scrollY) & 7;\n\t\tlet x = this.scrollX & 7;\n\n\t\tlet canvasOffset = this.line * 160 * 4;\n\n\t\tlet tile = this.vram[mapOffset + lineOffset];\n\n\t\tif (this.bgTile === 1 && tile < 128)\n\t\t\ttile += 256;\n\n\t\tfor (let i = 0; i < 160; i++) {\n\t\t\tlet color = this.palette.get(this.tileset[tile][y][x]);\n\n\t\t\tthis.screen.data[canvasOffset++] = color.r;\n\t\t\tthis.screen.data[canvasOffset++] = color.g;\n\t\t\tthis.screen.data[canvasOffset++] = color.b;\n\t\t\tthis.screen.data[canvasOffset++] = color.a;\n\n\t\t\tif (++x === 8) {\n\t\t\t\tx = 0;\n\n\t\t\t\tlineOffset = (lineOffset + 1) & 31;\n\t\t\t\ttile = this.vram[mapOffset + lineOffset];\n\n\t\t\t\tif (this.bgTile === 1 && tile < 128)\n\t\t\t\t\ttile += 256;\n\t\t\t}\n\t\t}\n\t}\n}","import {CpuInterface} from './CPU/index';\nimport {RegisterSetInterface} from './CPU/Registers';\nimport {GpuInterface} from './GPU/index';\nimport {MemoryInterface} from './Memory/index';\n\nexport interface HardwareBusInterface {\n\treadonly cpu: CpuInterface;\n\treadonly memory: MemoryInterface;\n\treadonly gpu: GpuInterface;\n\treadonly registers: RegisterSetInterface;\n}\n\nexport interface HardwareBusAwareInterface {\n\tsetHardwareBus(hardware: HardwareBusInterface): void;\n}\n\nexport class HardwareBus implements HardwareBusInterface {\n\tpublic readonly cpu: CpuInterface;\n\tpublic readonly memory: MemoryInterface;\n\tpublic readonly gpu: GpuInterface;\n\n\tpublic constructor(cpu: CpuInterface, memory: MemoryInterface, gpu: GpuInterface) {\n\t\tthis.cpu = cpu;\n\t\tthis.memory = memory;\n\t\tthis.gpu = gpu;\n\t}\n\n\tget registers(): RegisterSetInterface {\n\t\treturn this.cpu.registers;\n\t}\n}","export const bios = [\n\t0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,\n\t0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,\n\t0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,\n\t0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,\n\t0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,\n\t0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,\n\t0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,\n\t0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,\n\t0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,\n\t0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,\n\t0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,\n\t0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,\n\t0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,\n\t0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,\n\t0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,\n\t0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50,\n];","import {HardwareBusAwareInterface, HardwareBusInterface} from '../Hardware';\nimport {bios} from './Bios';\n\nexport interface MemoryInterface {\n\tbios: number[]; // 256b\n\trom: number[]; // 32k\n\teram: number[]; // 8k\n\twram: number[]; // 8k\n\tzram: number[]; // 128b\n\n\tinterruptsEnabled: number;\n\tinterruptFlags: number;\n\n\treadByte(address: number): number;\n\treadWord(address: number): number;\n\twriteByte(address: number, value: number): void;\n\twriteWord(address: number, value: number): void;\n\n\tload(file: File): Promise<FileReader>;\n\treset(): void;\n}\n\nexport class Memory implements MemoryInterface, HardwareBusAwareInterface {\n\tpublic bios: number[];\n\n\tpublic rom: number[];\n\tpublic eram: number[];\n\tpublic wram: number[];\n\tpublic zram: number[];\n\tpublic interruptsEnabled: number;\n\tpublic interruptFlags: number;\n\n\tprivate inBios: boolean = true;\n\tprivate hardware: HardwareBusInterface = null;\n\n\tpublic constructor() {\n\t\tthis.bios = bios;\n\n\t\tthis.reset();\n\t}\n\n\tpublic readByte(address: number): number {\n\t\tconst masked = address & 0xF000;\n\n\t\tif (masked === 0x0000) { // BIOS / High ROM0\n\t\t\tif (this.inBios) {\n\t\t\t\tif (address < 0x0100)\n\t\t\t\t\treturn this.bios[address];\n\t\t\t\telse if (this.hardware.cpu.registers.programCount === 0x0100)\n\t\t\t\t\tthis.inBios = false;\n\t\t\t}\n\n\t\t\treturn this.rom[address];\n\t\t} else if (masked <= 0x7000) // ROM0 / ROM1 (unbanked)\n\t\t\treturn this.rom[address];\n\t\telse if (masked <= 0x9000) // Video RAM\n\t\t\treturn this.hardware.gpu.vram[address & 0x1FFF];\n\t\telse if (masked <= 0xB000) // External RAM\n\t\t\treturn this.eram[address & 0x1FFF];\n\t\telse if (masked <= 0xFD00) // Working RAM and WRAM shadow\n\t\t\treturn this.wram[address & 0x1FFF];\n\t\telse {\n\t\t\tconst lowMasked = address & 0x0F00;\n\n\t\t\tif (lowMasked === 0xE00) { // Graphics object attribute memory (OAM)\n\t\t\t\tif (address < 0xFEA0)\n\t\t\t\t\treturn this.hardware.gpu.oam[address & 0xFF];\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t} else if (lowMasked === 0xF00) { // Zero-page RAM\n\t\t\t\tif (address === 0xFFFF)\n\t\t\t\t\treturn this.interruptsEnabled;\n\t\t\t\tif (address >= 0xFF80)\n\t\t\t\t\treturn this.zram[address & 0x7F];\n\t\t\t\telse {\n\t\t\t\t\tconst ioMasked = address & 0xF0;\n\n\t\t\t\t\tif (ioMasked === 0x00) {\n\t\t\t\t\t\tconst handlerMask = ioMasked & 0xF;\n\n\t\t\t\t\t\tif (handlerMask === 0)\n\t\t\t\t\t\t\tthrow new Error('KEY not yet implemented');\n\t\t\t\t\t\telse if (handlerMask >= 4 && handlerMask <= 7)\n\t\t\t\t\t\t\tthrow new Error('TIMER not yet implemented');\n\t\t\t\t\t\telse if (handlerMask === 15)\n\t\t\t\t\t\t\treturn this.interruptFlags;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} else if (ioMasked >= 0x40 && ioMasked <= 0x70)\n\t\t\t\t\t\treturn this.hardware.gpu.readByte(address);\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic readWord(address: number): number {\n\t\treturn this.readByte(address) + (this.readByte(address + 1) << 8);\n\t}\n\n\tpublic writeByte(address: number, value: number): void {\n\t\tconst masked = address & 0xF000;\n\n\t\tif (masked <= 0x7000) // ROM is not writable\n\t\t\treturn;\n\t\telse if (masked <= 0x9000) { // Video RAM\n\t\t\tconst mapped = address & 0x1FFF;\n\n\t\t\tthis.hardware.gpu.vram[mapped] = value;\n\t\t\tthis.hardware.gpu.updateTile(mapped, value); // TODO this may need to be the full address, not the mapped one\n\t\t} else if (masked <= 0xB000) // External RAM\n\t\t\tthis.eram[address & 0x1FFF] = value;\n\t\telse if (masked <= 0xFD000) // Working RAM / WRAM shadow\n\t\t\tthis.wram[address & 0x1FFF] = value;\n\t\telse {\n\t\t\tconst lowMasked = address & 0x0F00;\n\n\t\t\tif (lowMasked === 0xE00) {\n\t\t\t\tconst mapped = address & 0xFF;\n\n\t\t\t\tif (mapped < 0xA0)\n\t\t\t\t\treturn;\n\n\t\t\t\tthis.hardware.gpu.updateOAM(mapped, value);\n\t\t\t} else if (lowMasked === 0xF00) { // Zero-page RAM\n\t\t\t\tif (address === 0xFFFF)\n\t\t\t\t\tthis.interruptsEnabled = value;\n\t\t\t\telse if (address >= 0xFF80)\n\t\t\t\t\tthis.zram[address & 0x7F] = value;\n\t\t\t\telse {\n\t\t\t\t\tconst ioMasked = address & 0xF0;\n\n\t\t\t\t\tif (ioMasked === 0x00) {\n\t\t\t\t\t\tconst handlerMask = ioMasked & 0xF;\n\n\t\t\t\t\t\tif (handlerMask === 0)\n\t\t\t\t\t\t\tthrow new Error('KEY not yet implemented');\n\t\t\t\t\t\telse if (handlerMask >= 4 && handlerMask <= 7)\n\t\t\t\t\t\t\tthrow new Error('TIMER not yet implemented');\n\t\t\t\t\t\telse if (handlerMask === 15)\n\t\t\t\t\t\t\tthis.interruptFlags = value;\n\t\t\t\t\t} else if (ioMasked >= 0x40 && ioMasked <= 0x70)\n\t\t\t\t\t\tthis.hardware.gpu.writeByte(address, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic writeWord(address: number, value: number): void {\n\t\tthis.writeByte(address, value & 255);\n\t\tthis.writeByte(address + 1, value >> 8);\n\t}\n\n\tpublic setHardwareBus(hardware: HardwareBusInterface): void {\n\t\tthis.hardware = hardware;\n\t}\n\n\tpublic load(file: File): Promise<FileReader> {\n\t\tconst reader = new FileReader();\n\n\t\treturn new Promise<FileReader>((resolve, reject) => {\n\t\t\treader.addEventListener('load', () => {\n\t\t\t\tthis.rom = reader.result.split('').map((char: string) => char.charCodeAt(0));\n\n\t\t\t\tresolve(reader);\n\t\t\t});\n\n\t\t\treader.addEventListener('error', () => reject(reader.error));\n\t\t\treader.addEventListener('abort', () => reject(null));\n\n\t\t\treader.readAsBinaryString(file);\n\t\t});\n\t}\n\n\tpublic reset(): void {\n\t\tthis.inBios = true;\n\n\t\tthis.rom = (new Array(1 << 15)).fill(0); // 32k\n\t\tthis.eram = (new Array(1 << 13)).fill(0); // 8k\n\t\tthis.wram = (new Array(1 << 13)).fill(0); // 8k\n\t\tthis.zram = (new Array(128)).fill(0); // 128b\n\n\t\tthis.interruptsEnabled = 0;\n\t\tthis.interruptFlags = 0;\n\t}\n}","import {RegisterKey, RegisterSetInterface} from './Emulator/CPU/Registers';\r\nimport {HardwareBusInterface} from './Emulator/Hardware';\r\n\r\nconst registerKeys: RegisterKey[] = ['a', 'b', 'c', 'd', 'e', 'h', 'l', 'flags', 'programCount', 'stackPointer', 'm', 't'];\r\n\r\nclass RegisterMonitor {\r\n\tprivate static attached: boolean = false;\r\n\tprivate static registers: RegisterSetInterface = null;\r\n\tprivate static elements: {[key: string]: HTMLElement} = {};\r\n\r\n\tpublic static update(): void {\r\n\t\tif (!this.attached)\r\n\t\t\treturn;\r\n\r\n\t\tObject.keys(this.elements).forEach(key => {\r\n\t\t\tif (!this.elements[key])\r\n\t\t\t\treturn;\r\n\r\n\t\t\tlet value = this.registers[<RegisterKey>key].toString(16);\r\n\r\n\t\t\tif (value.length < 2)\r\n\t\t\t\tvalue = `0${value}`;\r\n\r\n\t\t\tthis.elements[key].textContent = '0x' + value;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static attach(root: HTMLElement, registers: RegisterSetInterface) {\r\n\t\tregisterKeys.forEach(key => {\r\n\t\t\tthis.elements[key] = root.querySelector(`#register-${key}`);\r\n\t\t});\r\n\r\n\t\tthis.attached = true;\r\n\t\tthis.registers = registers;\r\n\t}\r\n}\r\n\r\nexport default class Monitor {\r\n\tprivate static updateIntervalId: number = null;\r\n\r\n\tpublic static attach(root: HTMLElement, hardware: HardwareBusInterface) {\r\n\t\tRegisterMonitor.attach(root.querySelector('#registers'), hardware.registers);\r\n\r\n\t\tthis.updateIntervalId = setInterval(() => {\r\n\t\t\tRegisterMonitor.update();\r\n\t\t});\r\n\t}\r\n}","import {Cpu} from './Emulator/CPU/index';\nimport {Gpu} from './Emulator/GPU/index';\nimport {HardwareBus} from './Emulator/Hardware';\nimport {Memory} from './Emulator/Memory/index';\nimport Monitor from './Monitor';\n\nconst cpu = new Cpu();\nconst memory = new Memory();\nconst gpu = new Gpu(<HTMLCanvasElement>document.getElementById('screen'));\n\nconst hardware = new HardwareBus(cpu, memory, gpu);\n\ncpu.setHardwareBus(hardware);\nmemory.setHardwareBus(hardware);\ngpu.setHardwareBus(hardware);\n\nMonitor.attach(document.querySelector('#monitor'), hardware);\n\nconst romLoader = <HTMLInputElement>document.getElementById('rom-loader');\n\nromLoader.addEventListener('change', () => {\n\tgpu.reset();\n\tmemory.reset();\n\tcpu.reset();\n\n\tcpu.halt = true;\n\n\tif (!romLoader.files.length)\n\t\treturn;\n\n\tmemory.load(romLoader.files[0]).then(() => cpu.exec());\n});"],"sourceRoot":""}